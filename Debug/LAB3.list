
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800322c  0800322c  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  0800322c  0800322c  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800322c  0800322c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800322c  0800322c  0001322c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003230  08003230  00013230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08003234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000040  08003274  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08003274  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c93  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c58  00000000  00000000  00028cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002a958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017267  00000000  00000000  0002bd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd1f  00000000  00000000  00042faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822f5  00000000  00000000  0004fcce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1fc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a24  00000000  00000000  000d2014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000040 	.word	0x20000040
 800012c:	00000000 	.word	0x00000000
 8000130:	080031f4 	.word	0x080031f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000044 	.word	0x20000044
 800014c:	080031f4 	.word	0x080031f4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <display7SEG1>:
#include "display7SEG.h"

uint8_t segmentArray[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6F}; //From 0 to 9
int state7SEG = 1;

void display7SEG1(int8_t counter) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	if (counter<0 || counter>9) return;
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	db25      	blt.n	800099a <display7SEG1+0x5e>
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	2b09      	cmp	r3, #9
 8000954:	dc21      	bgt.n	800099a <display7SEG1+0x5e>
	for (int i=0; i<7; i++) {
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	e01a      	b.n	8000992 <display7SEG1+0x56>
		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin << i, !((segmentArray[counter]>>i)&0x1));
 800095c:	2201      	movs	r2, #1
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	b299      	uxth	r1, r3
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <display7SEG1+0x68>)
 800096c:	5cd3      	ldrb	r3, [r2, r3]
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	fa42 f303 	asr.w	r3, r2, r3
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	2b00      	cmp	r3, #0
 800097c:	bf0c      	ite	eq
 800097e:	2301      	moveq	r3, #1
 8000980:	2300      	movne	r3, #0
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	4808      	ldr	r0, [pc, #32]	; (80009a8 <display7SEG1+0x6c>)
 8000988:	f001 fc0b 	bl	80021a2 <HAL_GPIO_WritePin>
	for (int i=0; i<7; i++) {
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	3301      	adds	r3, #1
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	2b06      	cmp	r3, #6
 8000996:	dde1      	ble.n	800095c <display7SEG1+0x20>
 8000998:	e000      	b.n	800099c <display7SEG1+0x60>
	if (counter<0 || counter>9) return;
 800099a:	bf00      	nop
	}
}
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000000 	.word	0x20000000
 80009a8:	40010c00 	.word	0x40010c00

080009ac <display7SEG2>:

void display7SEG2(int8_t counter) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	if (counter<0 || counter>9) return;
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db25      	blt.n	8000a0a <display7SEG2+0x5e>
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	2b09      	cmp	r3, #9
 80009c4:	dc21      	bgt.n	8000a0a <display7SEG2+0x5e>
	for (int i=0; i<7; i++) {
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	e01a      	b.n	8000a02 <display7SEG2+0x56>
		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin << i, !((segmentArray[counter]>>i)&0x1));
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	b299      	uxth	r1, r3
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <display7SEG2+0x68>)
 80009dc:	5cd3      	ldrb	r3, [r2, r3]
 80009de:	461a      	mov	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	fa42 f303 	asr.w	r3, r2, r3
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	bf0c      	ite	eq
 80009ee:	2301      	moveq	r3, #1
 80009f0:	2300      	movne	r3, #0
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	461a      	mov	r2, r3
 80009f6:	4808      	ldr	r0, [pc, #32]	; (8000a18 <display7SEG2+0x6c>)
 80009f8:	f001 fbd3 	bl	80021a2 <HAL_GPIO_WritePin>
	for (int i=0; i<7; i++) {
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3301      	adds	r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2b06      	cmp	r3, #6
 8000a06:	dde1      	ble.n	80009cc <display7SEG2+0x20>
 8000a08:	e000      	b.n	8000a0c <display7SEG2+0x60>
	if (counter<0 || counter>9) return;
 8000a0a:	bf00      	nop
	}
}
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000000 	.word	0x20000000
 8000a18:	40010c00 	.word	0x40010c00

08000a1c <scan7SEG>:

void scan7SEG(int counter1, int counter2) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	int count1 = counter1%10;
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	4b34      	ldr	r3, [pc, #208]	; (8000afc <scan7SEG+0xe0>)
 8000a2a:	fb83 1302 	smull	r1, r3, r3, r2
 8000a2e:	1099      	asrs	r1, r3, #2
 8000a30:	17d3      	asrs	r3, r2, #31
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	440b      	add	r3, r1
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	617b      	str	r3, [r7, #20]
	int count2 = (counter1-count1)/10;
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	4a2d      	ldr	r2, [pc, #180]	; (8000afc <scan7SEG+0xe0>)
 8000a48:	fb82 1203 	smull	r1, r2, r2, r3
 8000a4c:	1092      	asrs	r2, r2, #2
 8000a4e:	17db      	asrs	r3, r3, #31
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	613b      	str	r3, [r7, #16]

	int count3 = counter2%10;
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	4b29      	ldr	r3, [pc, #164]	; (8000afc <scan7SEG+0xe0>)
 8000a58:	fb83 1302 	smull	r1, r3, r3, r2
 8000a5c:	1099      	asrs	r1, r3, #2
 8000a5e:	17d3      	asrs	r3, r2, #31
 8000a60:	1ac9      	subs	r1, r1, r3
 8000a62:	460b      	mov	r3, r1
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	60fb      	str	r3, [r7, #12]
	int count4 = (counter2-count3)/10;
 8000a6e:	683a      	ldr	r2, [r7, #0]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <scan7SEG+0xe0>)
 8000a76:	fb82 1203 	smull	r1, r2, r2, r3
 8000a7a:	1092      	asrs	r2, r2, #2
 8000a7c:	17db      	asrs	r3, r3, #31
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	60bb      	str	r3, [r7, #8]
	switch (state7SEG) {
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <scan7SEG+0xe4>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d002      	beq.n	8000a90 <scan7SEG+0x74>
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d019      	beq.n	8000ac2 <scan7SEG+0xa6>
			display7SEG1(count2);
			display7SEG2(count4);
			state7SEG = 1;
			break;
		default:
			break;
 8000a8e:	e031      	b.n	8000af4 <scan7SEG+0xd8>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	481b      	ldr	r0, [pc, #108]	; (8000b04 <scan7SEG+0xe8>)
 8000a96:	f001 fb84 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa0:	4818      	ldr	r0, [pc, #96]	; (8000b04 <scan7SEG+0xe8>)
 8000aa2:	f001 fb7e 	bl	80021a2 <HAL_GPIO_WritePin>
			display7SEG1(count1);
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	b25b      	sxtb	r3, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff46 	bl	800093c <display7SEG1>
			display7SEG2(count3);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff79 	bl	80009ac <display7SEG2>
			state7SEG = 2;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <scan7SEG+0xe4>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	601a      	str	r2, [r3, #0]
			break;
 8000ac0:	e018      	b.n	8000af4 <scan7SEG+0xd8>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	480f      	ldr	r0, [pc, #60]	; (8000b04 <scan7SEG+0xe8>)
 8000ac8:	f001 fb6b 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <scan7SEG+0xe8>)
 8000ad4:	f001 fb65 	bl	80021a2 <HAL_GPIO_WritePin>
			display7SEG1(count2);
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff2d 	bl	800093c <display7SEG1>
			display7SEG2(count4);
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff60 	bl	80009ac <display7SEG2>
			state7SEG = 1;
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <scan7SEG+0xe4>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	601a      	str	r2, [r3, #0]
			break;
 8000af2:	bf00      	nop
	}
}
 8000af4:	bf00      	nop
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	66666667 	.word	0x66666667
 8000b00:	2000000c 	.word	0x2000000c
 8000b04:	40010800 	.word	0x40010800

08000b08 <fsm_7SEG>:

#include "fsm_7SEG.h"

//int oneSec = 0;

void fsm_7SEG() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	switch (mode) {
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <fsm_7SEG+0x6c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d005      	beq.n	8000b20 <fsm_7SEG+0x18>
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	dd25      	ble.n	8000b64 <fsm_7SEG+0x5c>
 8000b18:	3b02      	subs	r3, #2
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d822      	bhi.n	8000b64 <fsm_7SEG+0x5c>
 8000b1e:	e010      	b.n	8000b42 <fsm_7SEG+0x3a>
		case 1:
			if (timer2_flag == 1) {
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <fsm_7SEG+0x70>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d11f      	bne.n	8000b68 <fsm_7SEG+0x60>
				scan7SEG(counter1, counter2);
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <fsm_7SEG+0x74>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <fsm_7SEG+0x78>)
 8000b2e:	6812      	ldr	r2, [r2, #0]
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff72 	bl	8000a1c <scan7SEG>
				setTimer2(500);
 8000b38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b3c:	f000 fe14 	bl	8001768 <setTimer2>
			}
			break;
 8000b40:	e012      	b.n	8000b68 <fsm_7SEG+0x60>
		case 2:
		case 3:
		case 4:
			if (timer2_flag == 1) {
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <fsm_7SEG+0x70>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d110      	bne.n	8000b6c <fsm_7SEG+0x64>
				scan7SEG(tmp, mode);
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <fsm_7SEG+0x7c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <fsm_7SEG+0x6c>)
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff61 	bl	8000a1c <scan7SEG>
				setTimer2(500);
 8000b5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5e:	f000 fe03 	bl	8001768 <setTimer2>
			}
			break;
 8000b62:	e003      	b.n	8000b6c <fsm_7SEG+0x64>
		default:
			break;
 8000b64:	bf00      	nop
 8000b66:	e002      	b.n	8000b6e <fsm_7SEG+0x66>
			break;
 8000b68:	bf00      	nop
 8000b6a:	e000      	b.n	8000b6e <fsm_7SEG+0x66>
			break;
 8000b6c:	bf00      	nop
	}
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000014 	.word	0x20000014
 8000b78:	200000dc 	.word	0x200000dc
 8000b7c:	20000028 	.word	0x20000028
 8000b80:	2000002c 	.word	0x2000002c
 8000b84:	20000030 	.word	0x20000030

08000b88 <fsm_automatic_run>:
 *      Author: minhl
 */

#include "fsm_automatic.h"

void fsm_automatic_run() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	switch (status) {
 8000b8c:	4b7c      	ldr	r3, [pc, #496]	; (8000d80 <fsm_automatic_run+0x1f8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	f200 80e8 	bhi.w	8000d68 <fsm_automatic_run+0x1e0>
 8000b98:	a201      	add	r2, pc, #4	; (adr r2, 8000ba0 <fsm_automatic_run+0x18>)
 8000b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9e:	bf00      	nop
 8000ba0:	08000bc1 	.word	0x08000bc1
 8000ba4:	08000d69 	.word	0x08000d69
 8000ba8:	08000d69 	.word	0x08000d69
 8000bac:	08000d69 	.word	0x08000d69
 8000bb0:	08000bed 	.word	0x08000bed
 8000bb4:	08000c4b 	.word	0x08000c4b
 8000bb8:	08000cad 	.word	0x08000cad
 8000bbc:	08000d09 	.word	0x08000d09
		case INIT:
			setTimer1(1000);
 8000bc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc4:	f000 fdb6 	bl	8001734 <setTimer1>
			status = RED_GREEN;
 8000bc8:	4b6d      	ldr	r3, [pc, #436]	; (8000d80 <fsm_automatic_run+0x1f8>)
 8000bca:	2205      	movs	r2, #5
 8000bcc:	601a      	str	r2, [r3, #0]
			counter1 = redDuration;
 8000bce:	4b6d      	ldr	r3, [pc, #436]	; (8000d84 <fsm_automatic_run+0x1fc>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a6d      	ldr	r2, [pc, #436]	; (8000d88 <fsm_automatic_run+0x200>)
 8000bd4:	6013      	str	r3, [r2, #0]
			counter2 = greenDuration;
 8000bd6:	4b6d      	ldr	r3, [pc, #436]	; (8000d8c <fsm_automatic_run+0x204>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a6d      	ldr	r2, [pc, #436]	; (8000d90 <fsm_automatic_run+0x208>)
 8000bdc:	6013      	str	r3, [r2, #0]
			setColor1(AUTO_RED);
 8000bde:	2002      	movs	r0, #2
 8000be0:	f000 feca 	bl	8001978 <setColor1>
			setColor2(AUTO_GREEN);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 ff0f 	bl	8001a08 <setColor2>
			break;
 8000bea:	e0c6      	b.n	8000d7a <fsm_automatic_run+0x1f2>
		case RED_GREEN:
			if (timer1_flag == 1) {
 8000bec:	4b69      	ldr	r3, [pc, #420]	; (8000d94 <fsm_automatic_run+0x20c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	f040 80bb 	bne.w	8000d6c <fsm_automatic_run+0x1e4>
				if (counter2 == 1) {
 8000bf6:	4b66      	ldr	r3, [pc, #408]	; (8000d90 <fsm_automatic_run+0x208>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d116      	bne.n	8000c2c <fsm_automatic_run+0xa4>
					status = RED_YELLOW;
 8000bfe:	4b60      	ldr	r3, [pc, #384]	; (8000d80 <fsm_automatic_run+0x1f8>)
 8000c00:	2206      	movs	r2, #6
 8000c02:	601a      	str	r2, [r3, #0]
					counter1--;
 8000c04:	4b60      	ldr	r3, [pc, #384]	; (8000d88 <fsm_automatic_run+0x200>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	4a5f      	ldr	r2, [pc, #380]	; (8000d88 <fsm_automatic_run+0x200>)
 8000c0c:	6013      	str	r3, [r2, #0]
					counter2 = yellowDuration;
 8000c0e:	4b62      	ldr	r3, [pc, #392]	; (8000d98 <fsm_automatic_run+0x210>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a5f      	ldr	r2, [pc, #380]	; (8000d90 <fsm_automatic_run+0x208>)
 8000c14:	6013      	str	r3, [r2, #0]
					setColor2(AUTO_YELLOW);
 8000c16:	2004      	movs	r0, #4
 8000c18:	f000 fef6 	bl	8001a08 <setColor2>
					timer1_flag = 0;
 8000c1c:	4b5d      	ldr	r3, [pc, #372]	; (8000d94 <fsm_automatic_run+0x20c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
					setTimer1(1000);
 8000c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c26:	f000 fd85 	bl	8001734 <setTimer1>
					counter1--;
					counter2--;
					setTimer1(1000);
				}
			}
			break;
 8000c2a:	e09f      	b.n	8000d6c <fsm_automatic_run+0x1e4>
					counter1--;
 8000c2c:	4b56      	ldr	r3, [pc, #344]	; (8000d88 <fsm_automatic_run+0x200>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	4a55      	ldr	r2, [pc, #340]	; (8000d88 <fsm_automatic_run+0x200>)
 8000c34:	6013      	str	r3, [r2, #0]
					counter2--;
 8000c36:	4b56      	ldr	r3, [pc, #344]	; (8000d90 <fsm_automatic_run+0x208>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	4a54      	ldr	r2, [pc, #336]	; (8000d90 <fsm_automatic_run+0x208>)
 8000c3e:	6013      	str	r3, [r2, #0]
					setTimer1(1000);
 8000c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c44:	f000 fd76 	bl	8001734 <setTimer1>
			break;
 8000c48:	e090      	b.n	8000d6c <fsm_automatic_run+0x1e4>
		case RED_YELLOW:
			if (timer1_flag == 1) {
 8000c4a:	4b52      	ldr	r3, [pc, #328]	; (8000d94 <fsm_automatic_run+0x20c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	f040 808e 	bne.w	8000d70 <fsm_automatic_run+0x1e8>
				if (counter1 == 1) {
 8000c54:	4b4c      	ldr	r3, [pc, #304]	; (8000d88 <fsm_automatic_run+0x200>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d118      	bne.n	8000c8e <fsm_automatic_run+0x106>
					status = GREEN_RED;
 8000c5c:	4b48      	ldr	r3, [pc, #288]	; (8000d80 <fsm_automatic_run+0x1f8>)
 8000c5e:	2207      	movs	r2, #7
 8000c60:	601a      	str	r2, [r3, #0]
					counter1 = greenDuration;
 8000c62:	4b4a      	ldr	r3, [pc, #296]	; (8000d8c <fsm_automatic_run+0x204>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a48      	ldr	r2, [pc, #288]	; (8000d88 <fsm_automatic_run+0x200>)
 8000c68:	6013      	str	r3, [r2, #0]
					counter2 = redDuration;
 8000c6a:	4b46      	ldr	r3, [pc, #280]	; (8000d84 <fsm_automatic_run+0x1fc>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a48      	ldr	r2, [pc, #288]	; (8000d90 <fsm_automatic_run+0x208>)
 8000c70:	6013      	str	r3, [r2, #0]
					setColor1(AUTO_GREEN);
 8000c72:	2003      	movs	r0, #3
 8000c74:	f000 fe80 	bl	8001978 <setColor1>
					setColor2(AUTO_RED);
 8000c78:	2002      	movs	r0, #2
 8000c7a:	f000 fec5 	bl	8001a08 <setColor2>
					timer1_flag = 0;
 8000c7e:	4b45      	ldr	r3, [pc, #276]	; (8000d94 <fsm_automatic_run+0x20c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
					setTimer1(1000);
 8000c84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c88:	f000 fd54 	bl	8001734 <setTimer1>
					counter1--;
					counter2--;
					setTimer1(1000);
				}
			}
			break;
 8000c8c:	e070      	b.n	8000d70 <fsm_automatic_run+0x1e8>
					counter1--;
 8000c8e:	4b3e      	ldr	r3, [pc, #248]	; (8000d88 <fsm_automatic_run+0x200>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	4a3c      	ldr	r2, [pc, #240]	; (8000d88 <fsm_automatic_run+0x200>)
 8000c96:	6013      	str	r3, [r2, #0]
					counter2--;
 8000c98:	4b3d      	ldr	r3, [pc, #244]	; (8000d90 <fsm_automatic_run+0x208>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	4a3c      	ldr	r2, [pc, #240]	; (8000d90 <fsm_automatic_run+0x208>)
 8000ca0:	6013      	str	r3, [r2, #0]
					setTimer1(1000);
 8000ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca6:	f000 fd45 	bl	8001734 <setTimer1>
			break;
 8000caa:	e061      	b.n	8000d70 <fsm_automatic_run+0x1e8>
		case GREEN_RED:
			if (timer1_flag == 1) {
 8000cac:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <fsm_automatic_run+0x20c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d15f      	bne.n	8000d74 <fsm_automatic_run+0x1ec>
				if (counter1 == 1) {
 8000cb4:	4b34      	ldr	r3, [pc, #208]	; (8000d88 <fsm_automatic_run+0x200>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d116      	bne.n	8000cea <fsm_automatic_run+0x162>
					status = YELLOW_RED;
 8000cbc:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <fsm_automatic_run+0x1f8>)
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	601a      	str	r2, [r3, #0]
					counter1 = yellowDuration;
 8000cc2:	4b35      	ldr	r3, [pc, #212]	; (8000d98 <fsm_automatic_run+0x210>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a30      	ldr	r2, [pc, #192]	; (8000d88 <fsm_automatic_run+0x200>)
 8000cc8:	6013      	str	r3, [r2, #0]
					counter2--;
 8000cca:	4b31      	ldr	r3, [pc, #196]	; (8000d90 <fsm_automatic_run+0x208>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	4a2f      	ldr	r2, [pc, #188]	; (8000d90 <fsm_automatic_run+0x208>)
 8000cd2:	6013      	str	r3, [r2, #0]
					setColor1(AUTO_YELLOW);
 8000cd4:	2004      	movs	r0, #4
 8000cd6:	f000 fe4f 	bl	8001978 <setColor1>
					timer1_flag = 0;
 8000cda:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <fsm_automatic_run+0x20c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
					setTimer1(1000);
 8000ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce4:	f000 fd26 	bl	8001734 <setTimer1>
					counter1--;
					counter2--;
					setTimer1(1000);
				}
			}
			break;
 8000ce8:	e044      	b.n	8000d74 <fsm_automatic_run+0x1ec>
					counter1--;
 8000cea:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <fsm_automatic_run+0x200>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	4a25      	ldr	r2, [pc, #148]	; (8000d88 <fsm_automatic_run+0x200>)
 8000cf2:	6013      	str	r3, [r2, #0]
					counter2--;
 8000cf4:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <fsm_automatic_run+0x208>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <fsm_automatic_run+0x208>)
 8000cfc:	6013      	str	r3, [r2, #0]
					setTimer1(1000);
 8000cfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d02:	f000 fd17 	bl	8001734 <setTimer1>
			break;
 8000d06:	e035      	b.n	8000d74 <fsm_automatic_run+0x1ec>
		case YELLOW_RED:
			if (timer1_flag == 1) {
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <fsm_automatic_run+0x20c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d133      	bne.n	8000d78 <fsm_automatic_run+0x1f0>
				if (counter1 == 1) {
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <fsm_automatic_run+0x200>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d118      	bne.n	8000d4a <fsm_automatic_run+0x1c2>
					status = RED_GREEN;
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <fsm_automatic_run+0x1f8>)
 8000d1a:	2205      	movs	r2, #5
 8000d1c:	601a      	str	r2, [r3, #0]
					counter1 = redDuration;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <fsm_automatic_run+0x1fc>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <fsm_automatic_run+0x200>)
 8000d24:	6013      	str	r3, [r2, #0]
					counter2 = greenDuration;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <fsm_automatic_run+0x204>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <fsm_automatic_run+0x208>)
 8000d2c:	6013      	str	r3, [r2, #0]
					setColor1(AUTO_RED);
 8000d2e:	2002      	movs	r0, #2
 8000d30:	f000 fe22 	bl	8001978 <setColor1>
					setColor2(AUTO_GREEN);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 fe67 	bl	8001a08 <setColor2>
					timer1_flag = 0;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <fsm_automatic_run+0x20c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
					setTimer1(1000);
 8000d40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d44:	f000 fcf6 	bl	8001734 <setTimer1>
					counter1--;
					counter2--;
					setTimer1(1000);
				}
			}
			break;
 8000d48:	e016      	b.n	8000d78 <fsm_automatic_run+0x1f0>
					counter1--;
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <fsm_automatic_run+0x200>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <fsm_automatic_run+0x200>)
 8000d52:	6013      	str	r3, [r2, #0]
					counter2--;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <fsm_automatic_run+0x208>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <fsm_automatic_run+0x208>)
 8000d5c:	6013      	str	r3, [r2, #0]
					setTimer1(1000);
 8000d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d62:	f000 fce7 	bl	8001734 <setTimer1>
			break;
 8000d66:	e007      	b.n	8000d78 <fsm_automatic_run+0x1f0>
		default:
			break;
 8000d68:	bf00      	nop
 8000d6a:	e006      	b.n	8000d7a <fsm_automatic_run+0x1f2>
			break;
 8000d6c:	bf00      	nop
 8000d6e:	e004      	b.n	8000d7a <fsm_automatic_run+0x1f2>
			break;
 8000d70:	bf00      	nop
 8000d72:	e002      	b.n	8000d7a <fsm_automatic_run+0x1f2>
			break;
 8000d74:	bf00      	nop
 8000d76:	e000      	b.n	8000d7a <fsm_automatic_run+0x1f2>
			break;
 8000d78:	bf00      	nop
	}
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000010 	.word	0x20000010
 8000d84:	2000001c 	.word	0x2000001c
 8000d88:	20000028 	.word	0x20000028
 8000d8c:	20000024 	.word	0x20000024
 8000d90:	2000002c 	.word	0x2000002c
 8000d94:	200000d4 	.word	0x200000d4
 8000d98:	20000020 	.word	0x20000020

08000d9c <check_button_flag>:
static	GPIO_PinState debounceButtonBuffer3[NO_OF_BUTTONS];
static	uint8_t flagForButtonPress1s[NO_OF_BUTTONS];
static	uint16_t counterForButtonPress1s[NO_OF_BUTTONS];
int button_flag[NO_OF_BUTTONS];

int check_button_flag(int i) {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	if (button_flag[i] == 1) {
 8000da4:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <check_button_flag+0x30>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d106      	bne.n	8000dbe <check_button_flag+0x22>
		button_flag[i] = 0;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <check_button_flag+0x30>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2100      	movs	r1, #0
 8000db6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <check_button_flag+0x24>
	}
	return 0;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000078 	.word	0x20000078

08000dd0 <button_reading>:

void button_reading(void) {
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
	for (char i=0; i<NO_OF_BUTTONS; i++) {
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	e087      	b.n	8000eec <button_reading+0x11c>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000ddc:	79fa      	ldrb	r2, [r7, #7]
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4947      	ldr	r1, [pc, #284]	; (8000f00 <button_reading+0x130>)
 8000de2:	5c89      	ldrb	r1, [r1, r2]
 8000de4:	4a47      	ldr	r2, [pc, #284]	; (8000f04 <button_reading+0x134>)
 8000de6:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000de8:	79fa      	ldrb	r2, [r7, #7]
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	4946      	ldr	r1, [pc, #280]	; (8000f08 <button_reading+0x138>)
 8000dee:	5c89      	ldrb	r1, [r1, r2]
 8000df0:	4a43      	ldr	r2, [pc, #268]	; (8000f00 <button_reading+0x130>)
 8000df2:	54d1      	strb	r1, [r2, r3]
		switch (i) {
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d01c      	beq.n	8000e34 <button_reading+0x64>
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	dc25      	bgt.n	8000e4a <button_reading+0x7a>
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <button_reading+0x38>
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d00b      	beq.n	8000e1e <button_reading+0x4e>
				break;
			case 2:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
				break;
			default:
				break;
 8000e06:	e020      	b.n	8000e4a <button_reading+0x7a>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000e08:	79fc      	ldrb	r4, [r7, #7]
 8000e0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e0e:	483f      	ldr	r0, [pc, #252]	; (8000f0c <button_reading+0x13c>)
 8000e10:	f001 f9b0 	bl	8002174 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b3b      	ldr	r3, [pc, #236]	; (8000f08 <button_reading+0x138>)
 8000e1a:	551a      	strb	r2, [r3, r4]
				break;
 8000e1c:	e016      	b.n	8000e4c <button_reading+0x7c>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000e1e:	79fc      	ldrb	r4, [r7, #7]
 8000e20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e24:	4839      	ldr	r0, [pc, #228]	; (8000f0c <button_reading+0x13c>)
 8000e26:	f001 f9a5 	bl	8002174 <HAL_GPIO_ReadPin>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <button_reading+0x138>)
 8000e30:	551a      	strb	r2, [r3, r4]
				break;
 8000e32:	e00b      	b.n	8000e4c <button_reading+0x7c>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000e34:	79fc      	ldrb	r4, [r7, #7]
 8000e36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3a:	4834      	ldr	r0, [pc, #208]	; (8000f0c <button_reading+0x13c>)
 8000e3c:	f001 f99a 	bl	8002174 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <button_reading+0x138>)
 8000e46:	551a      	strb	r2, [r3, r4]
				break;
 8000e48:	e000      	b.n	8000e4c <button_reading+0x7c>
				break;
 8000e4a:	bf00      	nop
		}
		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer3[i])) {
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4a2e      	ldr	r2, [pc, #184]	; (8000f08 <button_reading+0x138>)
 8000e50:	5cd2      	ldrb	r2, [r2, r3]
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	492a      	ldr	r1, [pc, #168]	; (8000f00 <button_reading+0x130>)
 8000e56:	5ccb      	ldrb	r3, [r1, r3]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d11c      	bne.n	8000e96 <button_reading+0xc6>
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4a2a      	ldr	r2, [pc, #168]	; (8000f08 <button_reading+0x138>)
 8000e60:	5cd2      	ldrb	r2, [r2, r3]
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	4927      	ldr	r1, [pc, #156]	; (8000f04 <button_reading+0x134>)
 8000e66:	5ccb      	ldrb	r3, [r1, r3]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d114      	bne.n	8000e96 <button_reading+0xc6>
			if (buttonBuffer[i] == BUTTON_IS_RELEASED && debounceButtonBuffer1[i] == BUTTON_IS_PRESSED) {
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4a28      	ldr	r2, [pc, #160]	; (8000f10 <button_reading+0x140>)
 8000e70:	5cd3      	ldrb	r3, [r2, r3]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d109      	bne.n	8000e8a <button_reading+0xba>
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	4a23      	ldr	r2, [pc, #140]	; (8000f08 <button_reading+0x138>)
 8000e7a:	5cd3      	ldrb	r3, [r2, r3]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d104      	bne.n	8000e8a <button_reading+0xba>
				button_flag[i] = 1;
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4a24      	ldr	r2, [pc, #144]	; (8000f14 <button_reading+0x144>)
 8000e84:	2101      	movs	r1, #1
 8000e86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000e8a:	79fa      	ldrb	r2, [r7, #7]
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	491e      	ldr	r1, [pc, #120]	; (8000f08 <button_reading+0x138>)
 8000e90:	5c89      	ldrb	r1, [r1, r2]
 8000e92:	4a1f      	ldr	r2, [pc, #124]	; (8000f10 <button_reading+0x140>)
 8000e94:	54d1      	strb	r1, [r2, r3]
		}
		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	4a1d      	ldr	r2, [pc, #116]	; (8000f10 <button_reading+0x140>)
 8000e9a:	5cd3      	ldrb	r3, [r2, r3]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d114      	bne.n	8000eca <button_reading+0xfa>
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	4a1d      	ldr	r2, [pc, #116]	; (8000f18 <button_reading+0x148>)
 8000ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea8:	2b63      	cmp	r3, #99	; 0x63
 8000eaa:	d809      	bhi.n	8000ec0 <button_reading+0xf0>
				counterForButtonPress1s[i]++;
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <button_reading+0x148>)
 8000eb0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000eb4:	3201      	adds	r2, #1
 8000eb6:	b291      	uxth	r1, r2
 8000eb8:	4a17      	ldr	r2, [pc, #92]	; (8000f18 <button_reading+0x148>)
 8000eba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ebe:	e012      	b.n	8000ee6 <button_reading+0x116>
			} else {
				flagForButtonPress1s[i] = 1;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <button_reading+0x14c>)
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	54d1      	strb	r1, [r2, r3]
 8000ec8:	e00d      	b.n	8000ee6 <button_reading+0x116>
			}
		} else {
			button_flag[i] = 0;
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4a11      	ldr	r2, [pc, #68]	; (8000f14 <button_reading+0x144>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress1s[i] = 0;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <button_reading+0x148>)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <button_reading+0x14c>)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	54d1      	strb	r1, [r2, r3]
	for (char i=0; i<NO_OF_BUTTONS; i++) {
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	f67f af74 	bls.w	8000ddc <button_reading+0xc>
		}
	}
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd90      	pop	{r4, r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000064 	.word	0x20000064
 8000f04:	20000068 	.word	0x20000068
 8000f08:	20000060 	.word	0x20000060
 8000f0c:	40010800 	.word	0x40010800
 8000f10:	2000005c 	.word	0x2000005c
 8000f14:	20000078 	.word	0x20000078
 8000f18:	20000070 	.word	0x20000070
 8000f1c:	2000006c 	.word	0x2000006c

08000f20 <is_button_pressed_1s>:
unsigned char is_button_pressed(uint8_t index) {
	if (index >= NO_OF_BUTTONS) return 0;
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
}

unsigned char is_button_pressed_1s(unsigned char index) {
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0xff;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <is_button_pressed_1s+0x14>
 8000f30:	23ff      	movs	r3, #255	; 0xff
 8000f32:	e007      	b.n	8000f44 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <is_button_pressed_1s+0x30>)
 8000f38:	5cd3      	ldrb	r3, [r2, r3]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2301      	moveq	r3, #1
 8000f40:	2300      	movne	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	2000006c 	.word	0x2000006c

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f58:	f000 fe20 	bl	8001b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5c:	f000 f828 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f60:	f000 f8ee 	bl	8001140 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f64:	f000 f860 	bl	8001028 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f68:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <main+0x50>)
 8000f6a:	f001 fd83 	bl	8002a74 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer0(1000);
 8000f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f72:	f000 fbc5 	bl	8001700 <setTimer0>
  setTimer2(500);
 8000f76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f7a:	f000 fbf5 	bl	8001768 <setTimer2>
  while (1)
  {
	  if (timer0_flag == 1) {
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <main+0x54>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d108      	bne.n	8000f98 <main+0x44>
		  HAL_GPIO_TogglePin(LED_TEST_GPIO_Port, LED_TEST_Pin);
 8000f86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8a:	4808      	ldr	r0, [pc, #32]	; (8000fac <main+0x58>)
 8000f8c:	f001 f921 	bl	80021d2 <HAL_GPIO_TogglePin>
		  setTimer0(1000);
 8000f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f94:	f000 fbb4 	bl	8001700 <setTimer0>
	  }
	  fsm_mode();
 8000f98:	f000 f948 	bl	800122c <fsm_mode>
	  fsm_7SEG();
 8000f9c:	f7ff fdb4 	bl	8000b08 <fsm_7SEG>
	  if (timer0_flag == 1) {
 8000fa0:	e7ed      	b.n	8000f7e <main+0x2a>
 8000fa2:	bf00      	nop
 8000fa4:	20000084 	.word	0x20000084
 8000fa8:	200000cc 	.word	0x200000cc
 8000fac:	40010c00 	.word	0x40010c00

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b090      	sub	sp, #64	; 0x40
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0318 	add.w	r3, r7, #24
 8000fba:	2228      	movs	r2, #40	; 0x28
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 f910 	bl	80031e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 f90c 	bl	8002204 <HAL_RCC_OscConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ff2:	f000 f915 	bl	8001220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f001 fb7a 	bl	8002708 <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800101a:	f000 f901 	bl	8001220 <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3740      	adds	r7, #64	; 0x40
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103c:	463b      	mov	r3, r7
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001044:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <MX_TIM2_Init+0x108>)
 8001046:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800104a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800104c:	4b38      	ldr	r3, [pc, #224]	; (8001130 <MX_TIM2_Init+0x108>)
 800104e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001052:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b36      	ldr	r3, [pc, #216]	; (8001130 <MX_TIM2_Init+0x108>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800105a:	4b35      	ldr	r3, [pc, #212]	; (8001130 <MX_TIM2_Init+0x108>)
 800105c:	220a      	movs	r2, #10
 800105e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001060:	4b33      	ldr	r3, [pc, #204]	; (8001130 <MX_TIM2_Init+0x108>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <MX_TIM2_Init+0x108>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800106c:	4830      	ldr	r0, [pc, #192]	; (8001130 <MX_TIM2_Init+0x108>)
 800106e:	f001 fcb1 	bl	80029d4 <HAL_TIM_Base_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001078:	f000 f8d2 	bl	8001220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001080:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	4619      	mov	r1, r3
 8001088:	4829      	ldr	r0, [pc, #164]	; (8001130 <MX_TIM2_Init+0x108>)
 800108a:	f001 fe47 	bl	8002d1c <HAL_TIM_ConfigClockSource>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001094:	f000 f8c4 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001098:	2300      	movs	r3, #0
 800109a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a0:	463b      	mov	r3, r7
 80010a2:	4619      	mov	r1, r3
 80010a4:	4822      	ldr	r0, [pc, #136]	; (8001130 <MX_TIM2_Init+0x108>)
 80010a6:	f002 f80f 	bl	80030c8 <HAL_TIMEx_MasterConfigSynchronization>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010b0:	f000 f8b6 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  CYCLE = 1/((8e6/(htim2.Init.Prescaler + 1))/htim2.Init.Period)*1000;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_TIM2_Init+0x108>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	3301      	adds	r3, #1
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f98a 	bl	80003d4 <__aeabi_ui2d>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	a118      	add	r1, pc, #96	; (adr r1, 8001128 <MX_TIM2_Init+0x100>)
 80010c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010ca:	f7ff fb27 	bl	800071c <__aeabi_ddiv>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4614      	mov	r4, r2
 80010d4:	461d      	mov	r5, r3
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_TIM2_Init+0x108>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f97a 	bl	80003d4 <__aeabi_ui2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4620      	mov	r0, r4
 80010e6:	4629      	mov	r1, r5
 80010e8:	f7ff fb18 	bl	800071c <__aeabi_ddiv>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	490f      	ldr	r1, [pc, #60]	; (8001134 <MX_TIM2_Init+0x10c>)
 80010f6:	f7ff fb11 	bl	800071c <__aeabi_ddiv>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_TIM2_Init+0x110>)
 8001108:	f7ff f9de 	bl	80004c8 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fbea 	bl	80008ec <__aeabi_d2iz>
 8001118:	4603      	mov	r3, r0
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <MX_TIM2_Init+0x114>)
 800111c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bdb0      	pop	{r4, r5, r7, pc}
 8001126:	bf00      	nop
 8001128:	00000000 	.word	0x00000000
 800112c:	415e8480 	.word	0x415e8480
 8001130:	20000084 	.word	0x20000084
 8001134:	3ff00000 	.word	0x3ff00000
 8001138:	408f4000 	.word	0x408f4000
 800113c:	20000018 	.word	0x20000018

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b29      	ldr	r3, [pc, #164]	; (80011fc <MX_GPIO_Init+0xbc>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a28      	ldr	r2, [pc, #160]	; (80011fc <MX_GPIO_Init+0xbc>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b26      	ldr	r3, [pc, #152]	; (80011fc <MX_GPIO_Init+0xbc>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <MX_GPIO_Init+0xbc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a22      	ldr	r2, [pc, #136]	; (80011fc <MX_GPIO_Init+0xbc>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <MX_GPIO_Init+0xbc>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED1_Pin|LED_GREEN2_Pin
 8001184:	2200      	movs	r2, #0
 8001186:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800118a:	481d      	ldr	r0, [pc, #116]	; (8001200 <MX_GPIO_Init+0xc0>)
 800118c:	f001 f809 	bl	80021a2 <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_RED2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, s0_Pin|s1_Pin|s2_Pin|s10_Pin
 8001190:	2200      	movs	r2, #0
 8001192:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001196:	481b      	ldr	r0, [pc, #108]	; (8001204 <MX_GPIO_Init+0xc4>)
 8001198:	f001 f803 	bl	80021a2 <HAL_GPIO_WritePin>
                          |s7_Pin|s8_Pin|s9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_GREEN1_Pin LED_YELLOW1_Pin LED_RED1_Pin LED_GREEN2_Pin
                           LED_YELLOW2_Pin LED_RED2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED1_Pin|LED_GREEN2_Pin
 800119c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80011a0:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_RED2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2302      	movs	r3, #2
 80011ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	4619      	mov	r1, r3
 80011b4:	4812      	ldr	r0, [pc, #72]	; (8001200 <MX_GPIO_Init+0xc0>)
 80011b6:	f000 fe61 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : s0_Pin s1_Pin s2_Pin s10_Pin
                           s11_Pin s12_Pin s13_Pin LED_TEST_Pin
                           s3_Pin s4_Pin s5_Pin s6_Pin
                           s7_Pin s8_Pin s9_Pin */
  GPIO_InitStruct.Pin = s0_Pin|s1_Pin|s2_Pin|s10_Pin
 80011ba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80011be:	60bb      	str	r3, [r7, #8]
                          |s11_Pin|s12_Pin|s13_Pin|LED_TEST_Pin
                          |s3_Pin|s4_Pin|s5_Pin|s6_Pin
                          |s7_Pin|s8_Pin|s9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2302      	movs	r3, #2
 80011ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4619      	mov	r1, r3
 80011d2:	480c      	ldr	r0, [pc, #48]	; (8001204 <MX_GPIO_Init+0xc4>)
 80011d4:	f000 fe52 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 80011d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	4619      	mov	r1, r3
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_GPIO_Init+0xc0>)
 80011ee:	f000 fe45 	bl	8001e7c <HAL_GPIO_Init>

}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010800 	.word	0x40010800
 8001204:	40010c00 	.word	0x40010c00

08001208 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	runTimer();
 8001210:	f000 fade 	bl	80017d0 <runTimer>
	button_reading();
 8001214:	f7ff fddc 	bl	8000dd0 <button_reading>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <fsm_mode>:
 *      Author: minhl
 */

#include "mode.h"

void fsm_mode() {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	switch (mode) {
 8001230:	4b8d      	ldr	r3, [pc, #564]	; (8001468 <fsm_mode+0x23c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3b01      	subs	r3, #1
 8001236:	2b03      	cmp	r3, #3
 8001238:	f200 8243 	bhi.w	80016c2 <fsm_mode+0x496>
 800123c:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <fsm_mode+0x18>)
 800123e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001242:	bf00      	nop
 8001244:	08001255 	.word	0x08001255
 8001248:	080012d3 	.word	0x080012d3
 800124c:	08001435 	.word	0x08001435
 8001250:	0800158f 	.word	0x0800158f
		case 1:
			fsm_automatic_run();
 8001254:	f7ff fc98 	bl	8000b88 <fsm_automatic_run>
			if (is_button_pressed_1s(0)) {
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff fe61 	bl	8000f20 <is_button_pressed_1s>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d013      	beq.n	800128c <fsm_mode+0x60>
				if (timer1_flag == 1) {
 8001264:	4b81      	ldr	r3, [pc, #516]	; (800146c <fsm_mode+0x240>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	f040 822c 	bne.w	80016c6 <fsm_mode+0x49a>
					mode = 2;
 800126e:	4b7e      	ldr	r3, [pc, #504]	; (8001468 <fsm_mode+0x23c>)
 8001270:	2202      	movs	r2, #2
 8001272:	601a      	str	r2, [r3, #0]
					tmp = redDuration;
 8001274:	4b7e      	ldr	r3, [pc, #504]	; (8001470 <fsm_mode+0x244>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a7e      	ldr	r2, [pc, #504]	; (8001474 <fsm_mode+0x248>)
 800127a:	6013      	str	r3, [r2, #0]
					setColor1(AUTO_RED);
 800127c:	2002      	movs	r0, #2
 800127e:	f000 fb7b 	bl	8001978 <setColor1>
					setTimer1(1000);
 8001282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001286:	f000 fa55 	bl	8001734 <setTimer1>
					disable2();
					setTimer1(500);
					setTimer3(200);
				}
			}
			break;
 800128a:	e21c      	b.n	80016c6 <fsm_mode+0x49a>
				if (check_button_flag(0)) {
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fd85 	bl	8000d9c <check_button_flag>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 8216 	beq.w	80016c6 <fsm_mode+0x49a>
					mode = 2;
 800129a:	4b73      	ldr	r3, [pc, #460]	; (8001468 <fsm_mode+0x23c>)
 800129c:	2202      	movs	r2, #2
 800129e:	601a      	str	r2, [r3, #0]
					tmp = redDuration;
 80012a0:	4b73      	ldr	r3, [pc, #460]	; (8001470 <fsm_mode+0x244>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a73      	ldr	r2, [pc, #460]	; (8001474 <fsm_mode+0x248>)
 80012a6:	6013      	str	r3, [r2, #0]
					counter1 = redDuration;
 80012a8:	4b71      	ldr	r3, [pc, #452]	; (8001470 <fsm_mode+0x244>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a72      	ldr	r2, [pc, #456]	; (8001478 <fsm_mode+0x24c>)
 80012ae:	6013      	str	r3, [r2, #0]
					counter2 = mode;
 80012b0:	4b6d      	ldr	r3, [pc, #436]	; (8001468 <fsm_mode+0x23c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a71      	ldr	r2, [pc, #452]	; (800147c <fsm_mode+0x250>)
 80012b6:	6013      	str	r3, [r2, #0]
					setColor1(AUTO_RED);
 80012b8:	2002      	movs	r0, #2
 80012ba:	f000 fb5d 	bl	8001978 <setColor1>
					disable2();
 80012be:	f000 fc31 	bl	8001b24 <disable2>
					setTimer1(500);
 80012c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c6:	f000 fa35 	bl	8001734 <setTimer1>
					setTimer3(200);
 80012ca:	20c8      	movs	r0, #200	; 0xc8
 80012cc:	f000 fa66 	bl	800179c <setTimer3>
			break;
 80012d0:	e1f9      	b.n	80016c6 <fsm_mode+0x49a>
		case 2:
			if (is_button_pressed_1s(0)) {
 80012d2:	2000      	movs	r0, #0
 80012d4:	f7ff fe24 	bl	8000f20 <is_button_pressed_1s>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d012      	beq.n	8001304 <fsm_mode+0xd8>
				if (timer1_flag == 1) {
 80012de:	4b63      	ldr	r3, [pc, #396]	; (800146c <fsm_mode+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d135      	bne.n	8001352 <fsm_mode+0x126>
					mode = 3;
 80012e6:	4b60      	ldr	r3, [pc, #384]	; (8001468 <fsm_mode+0x23c>)
 80012e8:	2203      	movs	r2, #3
 80012ea:	601a      	str	r2, [r3, #0]
					tmp = yellowDuration;
 80012ec:	4b64      	ldr	r3, [pc, #400]	; (8001480 <fsm_mode+0x254>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a60      	ldr	r2, [pc, #384]	; (8001474 <fsm_mode+0x248>)
 80012f2:	6013      	str	r3, [r2, #0]
					setColor1(AUTO_YELLOW);
 80012f4:	2004      	movs	r0, #4
 80012f6:	f000 fb3f 	bl	8001978 <setColor1>
					setTimer1(1000);
 80012fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012fe:	f000 fa19 	bl	8001734 <setTimer1>
 8001302:	e026      	b.n	8001352 <fsm_mode+0x126>
				}
			} else {
				if (timer1_flag == 1) {
 8001304:	4b59      	ldr	r3, [pc, #356]	; (800146c <fsm_mode+0x240>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d106      	bne.n	800131a <fsm_mode+0xee>
					blinkLed1(AUTO_RED);
 800130c:	2002      	movs	r0, #2
 800130e:	f000 fbc3 	bl	8001a98 <blinkLed1>
					setTimer1(500);
 8001312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001316:	f000 fa0d 	bl	8001734 <setTimer1>
				}
				if (check_button_flag(0)) {
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff fd3e 	bl	8000d9c <check_button_flag>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d015      	beq.n	8001352 <fsm_mode+0x126>
					counter1 = yellowDuration;
 8001326:	4b56      	ldr	r3, [pc, #344]	; (8001480 <fsm_mode+0x254>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a53      	ldr	r2, [pc, #332]	; (8001478 <fsm_mode+0x24c>)
 800132c:	6013      	str	r3, [r2, #0]
					counter2 = mode;
 800132e:	4b4e      	ldr	r3, [pc, #312]	; (8001468 <fsm_mode+0x23c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a52      	ldr	r2, [pc, #328]	; (800147c <fsm_mode+0x250>)
 8001334:	6013      	str	r3, [r2, #0]
					mode = 3;
 8001336:	4b4c      	ldr	r3, [pc, #304]	; (8001468 <fsm_mode+0x23c>)
 8001338:	2203      	movs	r2, #3
 800133a:	601a      	str	r2, [r3, #0]
					tmp = yellowDuration;
 800133c:	4b50      	ldr	r3, [pc, #320]	; (8001480 <fsm_mode+0x254>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a4c      	ldr	r2, [pc, #304]	; (8001474 <fsm_mode+0x248>)
 8001342:	6013      	str	r3, [r2, #0]
					setColor1(AUTO_YELLOW);
 8001344:	2004      	movs	r0, #4
 8001346:	f000 fb17 	bl	8001978 <setColor1>
					setTimer1(500);
 800134a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800134e:	f000 f9f1 	bl	8001734 <setTimer1>
				}
			}
			if (is_button_pressed_1s(1)) {
 8001352:	2001      	movs	r0, #1
 8001354:	f7ff fde4 	bl	8000f20 <is_button_pressed_1s>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d014      	beq.n	8001388 <fsm_mode+0x15c>
				if (timer3_flag == 1) {
 800135e:	4b49      	ldr	r3, [pc, #292]	; (8001484 <fsm_mode+0x258>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d123      	bne.n	80013ae <fsm_mode+0x182>
					if (tmp > 99) {
 8001366:	4b43      	ldr	r3, [pc, #268]	; (8001474 <fsm_mode+0x248>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b63      	cmp	r3, #99	; 0x63
 800136c:	dd03      	ble.n	8001376 <fsm_mode+0x14a>
						tmp = 1;
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <fsm_mode+0x248>)
 8001370:	2201      	movs	r2, #1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e004      	b.n	8001380 <fsm_mode+0x154>
					} else {
						tmp++;
 8001376:	4b3f      	ldr	r3, [pc, #252]	; (8001474 <fsm_mode+0x248>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	4a3d      	ldr	r2, [pc, #244]	; (8001474 <fsm_mode+0x248>)
 800137e:	6013      	str	r3, [r2, #0]
					}
					setTimer3(200);
 8001380:	20c8      	movs	r0, #200	; 0xc8
 8001382:	f000 fa0b 	bl	800179c <setTimer3>
 8001386:	e012      	b.n	80013ae <fsm_mode+0x182>
				}
			} else {
				if (check_button_flag(1)) {
 8001388:	2001      	movs	r0, #1
 800138a:	f7ff fd07 	bl	8000d9c <check_button_flag>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00c      	beq.n	80013ae <fsm_mode+0x182>
					if (tmp > 99) {
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <fsm_mode+0x248>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b63      	cmp	r3, #99	; 0x63
 800139a:	dd03      	ble.n	80013a4 <fsm_mode+0x178>
						tmp = 1;
 800139c:	4b35      	ldr	r3, [pc, #212]	; (8001474 <fsm_mode+0x248>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e004      	b.n	80013ae <fsm_mode+0x182>
					} else {
						tmp++;
 80013a4:	4b33      	ldr	r3, [pc, #204]	; (8001474 <fsm_mode+0x248>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	4a32      	ldr	r2, [pc, #200]	; (8001474 <fsm_mode+0x248>)
 80013ac:	6013      	str	r3, [r2, #0]
					}
				}
			}
			if (check_button_flag(2)) {
 80013ae:	2002      	movs	r0, #2
 80013b0:	f7ff fcf4 	bl	8000d9c <check_button_flag>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 8187 	beq.w	80016ca <fsm_mode+0x49e>
				redDuration = tmp;
 80013bc:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <fsm_mode+0x248>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a2b      	ldr	r2, [pc, #172]	; (8001470 <fsm_mode+0x244>)
 80013c2:	6013      	str	r3, [r2, #0]
				if (redDuration > (yellowDuration + greenDuration)) {
 80013c4:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <fsm_mode+0x254>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <fsm_mode+0x25c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	441a      	add	r2, r3
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <fsm_mode+0x244>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	da07      	bge.n	80013e6 <fsm_mode+0x1ba>
					greenDuration = redDuration - yellowDuration;
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <fsm_mode+0x244>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <fsm_mode+0x254>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	4a29      	ldr	r2, [pc, #164]	; (8001488 <fsm_mode+0x25c>)
 80013e2:	6013      	str	r3, [r2, #0]
					greenDuration = redDuration/2;
					if (redDuration%2 != 0)
						greenDuration++;
				}
			}
			break;
 80013e4:	e171      	b.n	80016ca <fsm_mode+0x49e>
				} else if (redDuration < (yellowDuration + greenDuration)) {
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <fsm_mode+0x254>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <fsm_mode+0x25c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	441a      	add	r2, r3
 80013f0:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <fsm_mode+0x244>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	f340 8168 	ble.w	80016ca <fsm_mode+0x49e>
					yellowDuration = redDuration/2;
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <fsm_mode+0x244>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	0fda      	lsrs	r2, r3, #31
 8001400:	4413      	add	r3, r2
 8001402:	105b      	asrs	r3, r3, #1
 8001404:	461a      	mov	r2, r3
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <fsm_mode+0x254>)
 8001408:	601a      	str	r2, [r3, #0]
					greenDuration = redDuration/2;
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <fsm_mode+0x244>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	0fda      	lsrs	r2, r3, #31
 8001410:	4413      	add	r3, r2
 8001412:	105b      	asrs	r3, r3, #1
 8001414:	461a      	mov	r2, r3
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <fsm_mode+0x25c>)
 8001418:	601a      	str	r2, [r3, #0]
					if (redDuration%2 != 0)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <fsm_mode+0x244>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 8151 	beq.w	80016ca <fsm_mode+0x49e>
						greenDuration++;
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <fsm_mode+0x25c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	4a16      	ldr	r2, [pc, #88]	; (8001488 <fsm_mode+0x25c>)
 8001430:	6013      	str	r3, [r2, #0]
			break;
 8001432:	e14a      	b.n	80016ca <fsm_mode+0x49e>
		case 3:
			if (is_button_pressed_1s(0)) {
 8001434:	2000      	movs	r0, #0
 8001436:	f7ff fd73 	bl	8000f20 <is_button_pressed_1s>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d025      	beq.n	800148c <fsm_mode+0x260>
				if (timer1_flag == 1) {
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <fsm_mode+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d148      	bne.n	80014da <fsm_mode+0x2ae>
					mode = 4;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <fsm_mode+0x23c>)
 800144a:	2204      	movs	r2, #4
 800144c:	601a      	str	r2, [r3, #0]
					tmp = greenDuration;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <fsm_mode+0x25c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <fsm_mode+0x248>)
 8001454:	6013      	str	r3, [r2, #0]
					setColor1(AUTO_GREEN);
 8001456:	2003      	movs	r0, #3
 8001458:	f000 fa8e 	bl	8001978 <setColor1>
					setTimer1(1000);
 800145c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001460:	f000 f968 	bl	8001734 <setTimer1>
 8001464:	e039      	b.n	80014da <fsm_mode+0x2ae>
 8001466:	bf00      	nop
 8001468:	20000014 	.word	0x20000014
 800146c:	200000d4 	.word	0x200000d4
 8001470:	2000001c 	.word	0x2000001c
 8001474:	20000030 	.word	0x20000030
 8001478:	20000028 	.word	0x20000028
 800147c:	2000002c 	.word	0x2000002c
 8001480:	20000020 	.word	0x20000020
 8001484:	200000e4 	.word	0x200000e4
 8001488:	20000024 	.word	0x20000024
				}
			} else {
				if (timer1_flag == 1) {
 800148c:	4b92      	ldr	r3, [pc, #584]	; (80016d8 <fsm_mode+0x4ac>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d106      	bne.n	80014a2 <fsm_mode+0x276>
					blinkLed1(AUTO_YELLOW);
 8001494:	2004      	movs	r0, #4
 8001496:	f000 faff 	bl	8001a98 <blinkLed1>
					setTimer1(500);
 800149a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800149e:	f000 f949 	bl	8001734 <setTimer1>
				}
				if (check_button_flag(0)) {
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff fc7a 	bl	8000d9c <check_button_flag>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d015      	beq.n	80014da <fsm_mode+0x2ae>
					counter1 = greenDuration;
 80014ae:	4b8b      	ldr	r3, [pc, #556]	; (80016dc <fsm_mode+0x4b0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a8b      	ldr	r2, [pc, #556]	; (80016e0 <fsm_mode+0x4b4>)
 80014b4:	6013      	str	r3, [r2, #0]
					counter2 = mode;
 80014b6:	4b8b      	ldr	r3, [pc, #556]	; (80016e4 <fsm_mode+0x4b8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a8b      	ldr	r2, [pc, #556]	; (80016e8 <fsm_mode+0x4bc>)
 80014bc:	6013      	str	r3, [r2, #0]
					mode = 4;
 80014be:	4b89      	ldr	r3, [pc, #548]	; (80016e4 <fsm_mode+0x4b8>)
 80014c0:	2204      	movs	r2, #4
 80014c2:	601a      	str	r2, [r3, #0]
					tmp = greenDuration;
 80014c4:	4b85      	ldr	r3, [pc, #532]	; (80016dc <fsm_mode+0x4b0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a88      	ldr	r2, [pc, #544]	; (80016ec <fsm_mode+0x4c0>)
 80014ca:	6013      	str	r3, [r2, #0]
					setColor1(AUTO_GREEN);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 fa53 	bl	8001978 <setColor1>
					setTimer1(500);
 80014d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d6:	f000 f92d 	bl	8001734 <setTimer1>
				}
			}
			if (is_button_pressed_1s(1)) {
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff fd20 	bl	8000f20 <is_button_pressed_1s>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d014      	beq.n	8001510 <fsm_mode+0x2e4>
				if (timer3_flag == 1) {
 80014e6:	4b82      	ldr	r3, [pc, #520]	; (80016f0 <fsm_mode+0x4c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d123      	bne.n	8001536 <fsm_mode+0x30a>
					if (tmp > 99) {
 80014ee:	4b7f      	ldr	r3, [pc, #508]	; (80016ec <fsm_mode+0x4c0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b63      	cmp	r3, #99	; 0x63
 80014f4:	dd03      	ble.n	80014fe <fsm_mode+0x2d2>
						tmp = 1;
 80014f6:	4b7d      	ldr	r3, [pc, #500]	; (80016ec <fsm_mode+0x4c0>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e004      	b.n	8001508 <fsm_mode+0x2dc>
					} else {
						tmp++;
 80014fe:	4b7b      	ldr	r3, [pc, #492]	; (80016ec <fsm_mode+0x4c0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	4a79      	ldr	r2, [pc, #484]	; (80016ec <fsm_mode+0x4c0>)
 8001506:	6013      	str	r3, [r2, #0]
					}
					setTimer3(200);
 8001508:	20c8      	movs	r0, #200	; 0xc8
 800150a:	f000 f947 	bl	800179c <setTimer3>
 800150e:	e012      	b.n	8001536 <fsm_mode+0x30a>
				}
			} else {
				if (check_button_flag(1)) {
 8001510:	2001      	movs	r0, #1
 8001512:	f7ff fc43 	bl	8000d9c <check_button_flag>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00c      	beq.n	8001536 <fsm_mode+0x30a>
					if (tmp > 99) {
 800151c:	4b73      	ldr	r3, [pc, #460]	; (80016ec <fsm_mode+0x4c0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b63      	cmp	r3, #99	; 0x63
 8001522:	dd03      	ble.n	800152c <fsm_mode+0x300>
						tmp = 1;
 8001524:	4b71      	ldr	r3, [pc, #452]	; (80016ec <fsm_mode+0x4c0>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e004      	b.n	8001536 <fsm_mode+0x30a>
					} else {
						tmp++;
 800152c:	4b6f      	ldr	r3, [pc, #444]	; (80016ec <fsm_mode+0x4c0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	4a6e      	ldr	r2, [pc, #440]	; (80016ec <fsm_mode+0x4c0>)
 8001534:	6013      	str	r3, [r2, #0]
					}
				}
			}
			if (check_button_flag(2)) {
 8001536:	2002      	movs	r0, #2
 8001538:	f7ff fc30 	bl	8000d9c <check_button_flag>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 80c5 	beq.w	80016ce <fsm_mode+0x4a2>
				yellowDuration = tmp;
 8001544:	4b69      	ldr	r3, [pc, #420]	; (80016ec <fsm_mode+0x4c0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a6a      	ldr	r2, [pc, #424]	; (80016f4 <fsm_mode+0x4c8>)
 800154a:	6013      	str	r3, [r2, #0]
				if (redDuration != yellowDuration + greenDuration) {
 800154c:	4b69      	ldr	r3, [pc, #420]	; (80016f4 <fsm_mode+0x4c8>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b62      	ldr	r3, [pc, #392]	; (80016dc <fsm_mode+0x4b0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	441a      	add	r2, r3
 8001556:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <fsm_mode+0x4cc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	f000 80b7 	beq.w	80016ce <fsm_mode+0x4a2>
					redDuration = yellowDuration + greenDuration;
 8001560:	4b64      	ldr	r3, [pc, #400]	; (80016f4 <fsm_mode+0x4c8>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b5d      	ldr	r3, [pc, #372]	; (80016dc <fsm_mode+0x4b0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4413      	add	r3, r2
 800156a:	4a63      	ldr	r2, [pc, #396]	; (80016f8 <fsm_mode+0x4cc>)
 800156c:	6013      	str	r3, [r2, #0]
					if (redDuration > 99) {
 800156e:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <fsm_mode+0x4cc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b63      	cmp	r3, #99	; 0x63
 8001574:	f340 80ab 	ble.w	80016ce <fsm_mode+0x4a2>
						redDuration = 99;
 8001578:	4b5f      	ldr	r3, [pc, #380]	; (80016f8 <fsm_mode+0x4cc>)
 800157a:	2263      	movs	r2, #99	; 0x63
 800157c:	601a      	str	r2, [r3, #0]
						greenDuration = redDuration - yellowDuration;
 800157e:	4b5e      	ldr	r3, [pc, #376]	; (80016f8 <fsm_mode+0x4cc>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <fsm_mode+0x4c8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	4a54      	ldr	r2, [pc, #336]	; (80016dc <fsm_mode+0x4b0>)
 800158a:	6013      	str	r3, [r2, #0]
					}
				}
			}
			break;
 800158c:	e09f      	b.n	80016ce <fsm_mode+0x4a2>
		case 4:
			if (is_button_pressed_1s(0)) {
 800158e:	2000      	movs	r0, #0
 8001590:	f7ff fcc6 	bl	8000f20 <is_button_pressed_1s>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d012      	beq.n	80015c0 <fsm_mode+0x394>
				if (timer1_flag == 1) {
 800159a:	4b4f      	ldr	r3, [pc, #316]	; (80016d8 <fsm_mode+0x4ac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d138      	bne.n	8001614 <fsm_mode+0x3e8>
					mode = 2;
 80015a2:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <fsm_mode+0x4b8>)
 80015a4:	2202      	movs	r2, #2
 80015a6:	601a      	str	r2, [r3, #0]
					tmp = redDuration;
 80015a8:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <fsm_mode+0x4cc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a4f      	ldr	r2, [pc, #316]	; (80016ec <fsm_mode+0x4c0>)
 80015ae:	6013      	str	r3, [r2, #0]
					setColor1(AUTO_RED);
 80015b0:	2002      	movs	r0, #2
 80015b2:	f000 f9e1 	bl	8001978 <setColor1>
					setTimer1(1000);
 80015b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ba:	f000 f8bb 	bl	8001734 <setTimer1>
 80015be:	e029      	b.n	8001614 <fsm_mode+0x3e8>
				}
			} else {
				if (timer1_flag == 1) {
 80015c0:	4b45      	ldr	r3, [pc, #276]	; (80016d8 <fsm_mode+0x4ac>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d106      	bne.n	80015d6 <fsm_mode+0x3aa>
					blinkLed1(AUTO_GREEN);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 fa65 	bl	8001a98 <blinkLed1>
					setTimer1(500);
 80015ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015d2:	f000 f8af 	bl	8001734 <setTimer1>
				}
				if (check_button_flag(0)) {
 80015d6:	2000      	movs	r0, #0
 80015d8:	f7ff fbe0 	bl	8000d9c <check_button_flag>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d018      	beq.n	8001614 <fsm_mode+0x3e8>
					counter1 = redDuration;
 80015e2:	4b45      	ldr	r3, [pc, #276]	; (80016f8 <fsm_mode+0x4cc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a3e      	ldr	r2, [pc, #248]	; (80016e0 <fsm_mode+0x4b4>)
 80015e8:	6013      	str	r3, [r2, #0]
					counter2 = mode;
 80015ea:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <fsm_mode+0x4b8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a3e      	ldr	r2, [pc, #248]	; (80016e8 <fsm_mode+0x4bc>)
 80015f0:	6013      	str	r3, [r2, #0]
					mode = 1;
 80015f2:	4b3c      	ldr	r3, [pc, #240]	; (80016e4 <fsm_mode+0x4b8>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
					tmp = redDuration;
 80015f8:	4b3f      	ldr	r3, [pc, #252]	; (80016f8 <fsm_mode+0x4cc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a3b      	ldr	r2, [pc, #236]	; (80016ec <fsm_mode+0x4c0>)
 80015fe:	6013      	str	r3, [r2, #0]
					setColor1(INIT);
 8001600:	2001      	movs	r0, #1
 8001602:	f000 f9b9 	bl	8001978 <setColor1>
					setTimer1(500);
 8001606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800160a:	f000 f893 	bl	8001734 <setTimer1>
					status = INIT;
 800160e:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <fsm_mode+0x4d0>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]
				}
			}
			if (is_button_pressed_1s(1)) {
 8001614:	2001      	movs	r0, #1
 8001616:	f7ff fc83 	bl	8000f20 <is_button_pressed_1s>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d014      	beq.n	800164a <fsm_mode+0x41e>
				if (timer3_flag == 1) {
 8001620:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <fsm_mode+0x4c4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d123      	bne.n	8001670 <fsm_mode+0x444>
					if (tmp > 99) {
 8001628:	4b30      	ldr	r3, [pc, #192]	; (80016ec <fsm_mode+0x4c0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b63      	cmp	r3, #99	; 0x63
 800162e:	dd03      	ble.n	8001638 <fsm_mode+0x40c>
						tmp = 1;
 8001630:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <fsm_mode+0x4c0>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e004      	b.n	8001642 <fsm_mode+0x416>
					} else {
						tmp++;
 8001638:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <fsm_mode+0x4c0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	4a2b      	ldr	r2, [pc, #172]	; (80016ec <fsm_mode+0x4c0>)
 8001640:	6013      	str	r3, [r2, #0]
					}
					setTimer3(200);
 8001642:	20c8      	movs	r0, #200	; 0xc8
 8001644:	f000 f8aa 	bl	800179c <setTimer3>
 8001648:	e012      	b.n	8001670 <fsm_mode+0x444>
				}
			} else {
				if (check_button_flag(1)) {
 800164a:	2001      	movs	r0, #1
 800164c:	f7ff fba6 	bl	8000d9c <check_button_flag>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00c      	beq.n	8001670 <fsm_mode+0x444>
					if (tmp > 99) {
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <fsm_mode+0x4c0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b63      	cmp	r3, #99	; 0x63
 800165c:	dd03      	ble.n	8001666 <fsm_mode+0x43a>
						tmp = 1;
 800165e:	4b23      	ldr	r3, [pc, #140]	; (80016ec <fsm_mode+0x4c0>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e004      	b.n	8001670 <fsm_mode+0x444>
					} else {
						tmp++;
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <fsm_mode+0x4c0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	4a1f      	ldr	r2, [pc, #124]	; (80016ec <fsm_mode+0x4c0>)
 800166e:	6013      	str	r3, [r2, #0]
					}
				}
			}
			if (check_button_flag(2)) {
 8001670:	2002      	movs	r0, #2
 8001672:	f7ff fb93 	bl	8000d9c <check_button_flag>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d02a      	beq.n	80016d2 <fsm_mode+0x4a6>
				greenDuration = tmp;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <fsm_mode+0x4c0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a16      	ldr	r2, [pc, #88]	; (80016dc <fsm_mode+0x4b0>)
 8001682:	6013      	str	r3, [r2, #0]
				if (redDuration != yellowDuration + greenDuration) {
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <fsm_mode+0x4c8>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <fsm_mode+0x4b0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	441a      	add	r2, r3
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <fsm_mode+0x4cc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d01d      	beq.n	80016d2 <fsm_mode+0x4a6>
					redDuration = yellowDuration + greenDuration;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <fsm_mode+0x4c8>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <fsm_mode+0x4b0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <fsm_mode+0x4cc>)
 80016a2:	6013      	str	r3, [r2, #0]
					if (redDuration > 99) {
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <fsm_mode+0x4cc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b63      	cmp	r3, #99	; 0x63
 80016aa:	dd12      	ble.n	80016d2 <fsm_mode+0x4a6>
						redDuration = 99;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <fsm_mode+0x4cc>)
 80016ae:	2263      	movs	r2, #99	; 0x63
 80016b0:	601a      	str	r2, [r3, #0]
						yellowDuration = redDuration - greenDuration;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <fsm_mode+0x4cc>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <fsm_mode+0x4b0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <fsm_mode+0x4c8>)
 80016be:	6013      	str	r3, [r2, #0]
					}
				}
			}
			break;
 80016c0:	e007      	b.n	80016d2 <fsm_mode+0x4a6>
		default:
			break;
 80016c2:	bf00      	nop
 80016c4:	e006      	b.n	80016d4 <fsm_mode+0x4a8>
			break;
 80016c6:	bf00      	nop
 80016c8:	e004      	b.n	80016d4 <fsm_mode+0x4a8>
			break;
 80016ca:	bf00      	nop
 80016cc:	e002      	b.n	80016d4 <fsm_mode+0x4a8>
			break;
 80016ce:	bf00      	nop
 80016d0:	e000      	b.n	80016d4 <fsm_mode+0x4a8>
			break;
 80016d2:	bf00      	nop
	}
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200000d4 	.word	0x200000d4
 80016dc:	20000024 	.word	0x20000024
 80016e0:	20000028 	.word	0x20000028
 80016e4:	20000014 	.word	0x20000014
 80016e8:	2000002c 	.word	0x2000002c
 80016ec:	20000030 	.word	0x20000030
 80016f0:	200000e4 	.word	0x200000e4
 80016f4:	20000020 	.word	0x20000020
 80016f8:	2000001c 	.word	0x2000001c
 80016fc:	20000010 	.word	0x20000010

08001700 <setTimer0>:
int timer2_flag = 0;
int timer2_count = 0;
int timer3_flag = 0;
int timer3_count = 0;

void setTimer0(int duration) {
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	timer0_count = duration/CYCLE;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <setTimer0+0x28>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001712:	4a06      	ldr	r2, [pc, #24]	; (800172c <setTimer0+0x2c>)
 8001714:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <setTimer0+0x30>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000018 	.word	0x20000018
 800172c:	200000d0 	.word	0x200000d0
 8001730:	200000cc 	.word	0x200000cc

08001734 <setTimer1>:

void setTimer1(int duration) {
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	timer1_count = duration/CYCLE;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <setTimer1+0x28>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	fb92 f3f3 	sdiv	r3, r2, r3
 8001746:	4a06      	ldr	r2, [pc, #24]	; (8001760 <setTimer1+0x2c>)
 8001748:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <setTimer1+0x30>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000018 	.word	0x20000018
 8001760:	200000d8 	.word	0x200000d8
 8001764:	200000d4 	.word	0x200000d4

08001768 <setTimer2>:

void setTimer2(int duration) {
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	timer2_count = duration/CYCLE;
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <setTimer2+0x28>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	fb92 f3f3 	sdiv	r3, r2, r3
 800177a:	4a06      	ldr	r2, [pc, #24]	; (8001794 <setTimer2+0x2c>)
 800177c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <setTimer2+0x30>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000018 	.word	0x20000018
 8001794:	200000e0 	.word	0x200000e0
 8001798:	200000dc 	.word	0x200000dc

0800179c <setTimer3>:

void setTimer3(int duration) {
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	timer3_count = duration/CYCLE;
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <setTimer3+0x28>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ae:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <setTimer3+0x2c>)
 80017b0:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <setTimer3+0x30>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000018 	.word	0x20000018
 80017c8:	200000e8 	.word	0x200000e8
 80017cc:	200000e4 	.word	0x200000e4

080017d0 <runTimer>:

void runTimer() {
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
	if (timer0_count > 0) {
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <runTimer+0x8c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	dd0b      	ble.n	80017f4 <runTimer+0x24>
		timer0_count--;
 80017dc:	4b1f      	ldr	r3, [pc, #124]	; (800185c <runTimer+0x8c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	4a1e      	ldr	r2, [pc, #120]	; (800185c <runTimer+0x8c>)
 80017e4:	6013      	str	r3, [r2, #0]
		if (timer0_count <= 0) timer0_flag = 1;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <runTimer+0x8c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	dc02      	bgt.n	80017f4 <runTimer+0x24>
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <runTimer+0x90>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
	}
	if (timer1_count > 0) {
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <runTimer+0x94>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	dd0b      	ble.n	8001814 <runTimer+0x44>
		timer1_count--;
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <runTimer+0x94>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3b01      	subs	r3, #1
 8001802:	4a18      	ldr	r2, [pc, #96]	; (8001864 <runTimer+0x94>)
 8001804:	6013      	str	r3, [r2, #0]
		if (timer1_count <= 0) timer1_flag = 1;
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <runTimer+0x94>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	dc02      	bgt.n	8001814 <runTimer+0x44>
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <runTimer+0x98>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]
	}
	if (timer2_count > 0) {
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <runTimer+0x9c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	dd0b      	ble.n	8001834 <runTimer+0x64>
		timer2_count--;
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <runTimer+0x9c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	3b01      	subs	r3, #1
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <runTimer+0x9c>)
 8001824:	6013      	str	r3, [r2, #0]
		if (timer2_count <= 0) timer2_flag = 1;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <runTimer+0x9c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	dc02      	bgt.n	8001834 <runTimer+0x64>
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <runTimer+0xa0>)
 8001830:	2201      	movs	r2, #1
 8001832:	601a      	str	r2, [r3, #0]
	}
	if (timer3_count > 0) {
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <runTimer+0xa4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	dd0b      	ble.n	8001854 <runTimer+0x84>
		timer3_count--;
 800183c:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <runTimer+0xa4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3b01      	subs	r3, #1
 8001842:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <runTimer+0xa4>)
 8001844:	6013      	str	r3, [r2, #0]
		if (timer3_count <= 0) timer3_flag = 1;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <runTimer+0xa4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	dc02      	bgt.n	8001854 <runTimer+0x84>
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <runTimer+0xa8>)
 8001850:	2201      	movs	r2, #1
 8001852:	601a      	str	r2, [r3, #0]
	}
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	200000d0 	.word	0x200000d0
 8001860:	200000cc 	.word	0x200000cc
 8001864:	200000d8 	.word	0x200000d8
 8001868:	200000d4 	.word	0x200000d4
 800186c:	200000e0 	.word	0x200000e0
 8001870:	200000dc 	.word	0x200000dc
 8001874:	200000e8 	.word	0x200000e8
 8001878:	200000e4 	.word	0x200000e4

0800187c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_MspInit+0x40>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <HAL_MspInit+0x40>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6193      	str	r3, [r2, #24]
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_MspInit+0x40>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_MspInit+0x40>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_MspInit+0x40>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	61d3      	str	r3, [r2, #28]
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_MspInit+0x40>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	40021000 	.word	0x40021000

080018c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d0:	d113      	bne.n	80018fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_TIM_Base_MspInit+0x44>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <HAL_TIM_Base_MspInit+0x44>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	61d3      	str	r3, [r2, #28]
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_TIM_Base_MspInit+0x44>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	201c      	movs	r0, #28
 80018f0:	f000 fa8d 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018f4:	201c      	movs	r0, #28
 80018f6:	f000 faa6 	bl	8001e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800190c:	e7fe      	b.n	800190c <NMI_Handler+0x4>

0800190e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler+0x4>

0800191a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <UsageFault_Handler+0x4>

08001926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194e:	f000 f96b 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <TIM2_IRQHandler+0x10>)
 800195e:	f001 f8d5 	bl	8002b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000084 	.word	0x20000084

0800196c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <setColor1>:
 *      Author: minhl
 */

#include "traffic.h"

void setColor1(int color) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	switch (color) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	2b03      	cmp	r3, #3
 8001986:	d837      	bhi.n	80019f8 <setColor1+0x80>
 8001988:	a201      	add	r2, pc, #4	; (adr r2, 8001990 <setColor1+0x18>)
 800198a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198e:	bf00      	nop
 8001990:	080019a1 	.word	0x080019a1
 8001994:	080019b7 	.word	0x080019b7
 8001998:	080019cd 	.word	0x080019cd
 800199c:	080019e3 	.word	0x080019e3
		case INIT:
			HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2108      	movs	r1, #8
 80019a4:	4817      	ldr	r0, [pc, #92]	; (8001a04 <setColor1+0x8c>)
 80019a6:	f000 fbfc 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin | LED_YELLOW1_Pin, GPIO_PIN_SET);
 80019aa:	2201      	movs	r2, #1
 80019ac:	2106      	movs	r1, #6
 80019ae:	4815      	ldr	r0, [pc, #84]	; (8001a04 <setColor1+0x8c>)
 80019b0:	f000 fbf7 	bl	80021a2 <HAL_GPIO_WritePin>
			break;
 80019b4:	e021      	b.n	80019fa <setColor1+0x82>
		case AUTO_RED:
			HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2108      	movs	r1, #8
 80019ba:	4812      	ldr	r0, [pc, #72]	; (8001a04 <setColor1+0x8c>)
 80019bc:	f000 fbf1 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin | LED_YELLOW1_Pin, GPIO_PIN_SET);
 80019c0:	2201      	movs	r2, #1
 80019c2:	2106      	movs	r1, #6
 80019c4:	480f      	ldr	r0, [pc, #60]	; (8001a04 <setColor1+0x8c>)
 80019c6:	f000 fbec 	bl	80021a2 <HAL_GPIO_WritePin>
			break;
 80019ca:	e016      	b.n	80019fa <setColor1+0x82>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2102      	movs	r1, #2
 80019d0:	480c      	ldr	r0, [pc, #48]	; (8001a04 <setColor1+0x8c>)
 80019d2:	f000 fbe6 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin | LED_YELLOW1_Pin, GPIO_PIN_SET);
 80019d6:	2201      	movs	r2, #1
 80019d8:	210c      	movs	r1, #12
 80019da:	480a      	ldr	r0, [pc, #40]	; (8001a04 <setColor1+0x8c>)
 80019dc:	f000 fbe1 	bl	80021a2 <HAL_GPIO_WritePin>
			break;
 80019e0:	e00b      	b.n	80019fa <setColor1+0x82>
		case AUTO_YELLOW:
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2104      	movs	r1, #4
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <setColor1+0x8c>)
 80019e8:	f000 fbdb 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin | LED_RED1_Pin, GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	210a      	movs	r1, #10
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <setColor1+0x8c>)
 80019f2:	f000 fbd6 	bl	80021a2 <HAL_GPIO_WritePin>
			break;
 80019f6:	e000      	b.n	80019fa <setColor1+0x82>
		default:
			break;
 80019f8:	bf00      	nop
	}
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40010800 	.word	0x40010800

08001a08 <setColor2>:

void setColor2(int color) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	switch (color) {
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d837      	bhi.n	8001a88 <setColor2+0x80>
 8001a18:	a201      	add	r2, pc, #4	; (adr r2, 8001a20 <setColor2+0x18>)
 8001a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1e:	bf00      	nop
 8001a20:	08001a31 	.word	0x08001a31
 8001a24:	08001a47 	.word	0x08001a47
 8001a28:	08001a5d 	.word	0x08001a5d
 8001a2c:	08001a73 	.word	0x08001a73
		case INIT:
			HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin, GPIO_PIN_RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2140      	movs	r1, #64	; 0x40
 8001a34:	4817      	ldr	r0, [pc, #92]	; (8001a94 <setColor2+0x8c>)
 8001a36:	f000 fbb4 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN2_Pin | LED_YELLOW2_Pin, GPIO_PIN_SET);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2130      	movs	r1, #48	; 0x30
 8001a3e:	4815      	ldr	r0, [pc, #84]	; (8001a94 <setColor2+0x8c>)
 8001a40:	f000 fbaf 	bl	80021a2 <HAL_GPIO_WritePin>
			break;
 8001a44:	e021      	b.n	8001a8a <setColor2+0x82>
		case AUTO_RED:
			HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2140      	movs	r1, #64	; 0x40
 8001a4a:	4812      	ldr	r0, [pc, #72]	; (8001a94 <setColor2+0x8c>)
 8001a4c:	f000 fba9 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN2_Pin | LED_YELLOW2_Pin, GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	2130      	movs	r1, #48	; 0x30
 8001a54:	480f      	ldr	r0, [pc, #60]	; (8001a94 <setColor2+0x8c>)
 8001a56:	f000 fba4 	bl	80021a2 <HAL_GPIO_WritePin>
			break;
 8001a5a:	e016      	b.n	8001a8a <setColor2+0x82>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(GPIOA, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2110      	movs	r1, #16
 8001a60:	480c      	ldr	r0, [pc, #48]	; (8001a94 <setColor2+0x8c>)
 8001a62:	f000 fb9e 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin | LED_YELLOW2_Pin, GPIO_PIN_SET);
 8001a66:	2201      	movs	r2, #1
 8001a68:	2160      	movs	r1, #96	; 0x60
 8001a6a:	480a      	ldr	r0, [pc, #40]	; (8001a94 <setColor2+0x8c>)
 8001a6c:	f000 fb99 	bl	80021a2 <HAL_GPIO_WritePin>
			break;
 8001a70:	e00b      	b.n	8001a8a <setColor2+0x82>
		case AUTO_YELLOW:
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2120      	movs	r1, #32
 8001a76:	4807      	ldr	r0, [pc, #28]	; (8001a94 <setColor2+0x8c>)
 8001a78:	f000 fb93 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN2_Pin | LED_RED2_Pin, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2150      	movs	r1, #80	; 0x50
 8001a80:	4804      	ldr	r0, [pc, #16]	; (8001a94 <setColor2+0x8c>)
 8001a82:	f000 fb8e 	bl	80021a2 <HAL_GPIO_WritePin>
			break;
 8001a86:	e000      	b.n	8001a8a <setColor2+0x82>
		default:
			break;
 8001a88:	bf00      	nop
	}
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40010800 	.word	0x40010800

08001a98 <blinkLed1>:

void blinkLed1(int color) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	switch (color) {
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d018      	beq.n	8001ad8 <blinkLed1+0x40>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	dc33      	bgt.n	8001b14 <blinkLed1+0x7c>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d003      	beq.n	8001aba <blinkLed1+0x22>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d01e      	beq.n	8001af6 <blinkLed1+0x5e>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, GPIO_PIN_SET);
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN1_Pin);
			break;
		default:
			break;
 8001ab8:	e02c      	b.n	8001b14 <blinkLed1+0x7c>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8001aba:	2201      	movs	r2, #1
 8001abc:	2104      	movs	r1, #4
 8001abe:	4818      	ldr	r0, [pc, #96]	; (8001b20 <blinkLed1+0x88>)
 8001ac0:	f000 fb6f 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, GPIO_PIN_SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	4815      	ldr	r0, [pc, #84]	; (8001b20 <blinkLed1+0x88>)
 8001aca:	f000 fb6a 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LED_RED1_Pin);
 8001ace:	2108      	movs	r1, #8
 8001ad0:	4813      	ldr	r0, [pc, #76]	; (8001b20 <blinkLed1+0x88>)
 8001ad2:	f000 fb7e 	bl	80021d2 <HAL_GPIO_TogglePin>
			break;
 8001ad6:	e01e      	b.n	8001b16 <blinkLed1+0x7e>
			HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, GPIO_PIN_SET);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	2108      	movs	r1, #8
 8001adc:	4810      	ldr	r0, [pc, #64]	; (8001b20 <blinkLed1+0x88>)
 8001ade:	f000 fb60 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, GPIO_PIN_SET);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	480e      	ldr	r0, [pc, #56]	; (8001b20 <blinkLed1+0x88>)
 8001ae8:	f000 fb5b 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW1_Pin);
 8001aec:	2104      	movs	r1, #4
 8001aee:	480c      	ldr	r0, [pc, #48]	; (8001b20 <blinkLed1+0x88>)
 8001af0:	f000 fb6f 	bl	80021d2 <HAL_GPIO_TogglePin>
			break;
 8001af4:	e00f      	b.n	8001b16 <blinkLed1+0x7e>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8001af6:	2201      	movs	r2, #1
 8001af8:	2104      	movs	r1, #4
 8001afa:	4809      	ldr	r0, [pc, #36]	; (8001b20 <blinkLed1+0x88>)
 8001afc:	f000 fb51 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, GPIO_PIN_SET);
 8001b00:	2201      	movs	r2, #1
 8001b02:	2108      	movs	r1, #8
 8001b04:	4806      	ldr	r0, [pc, #24]	; (8001b20 <blinkLed1+0x88>)
 8001b06:	f000 fb4c 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN1_Pin);
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	4804      	ldr	r0, [pc, #16]	; (8001b20 <blinkLed1+0x88>)
 8001b0e:	f000 fb60 	bl	80021d2 <HAL_GPIO_TogglePin>
			break;
 8001b12:	e000      	b.n	8001b16 <blinkLed1+0x7e>
			break;
 8001b14:	bf00      	nop
	}
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40010800 	.word	0x40010800

08001b24 <disable2>:
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, GPIO_PIN_SET);
}

void disable2() {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin, GPIO_PIN_SET);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	2140      	movs	r1, #64	; 0x40
 8001b2c:	4807      	ldr	r0, [pc, #28]	; (8001b4c <disable2+0x28>)
 8001b2e:	f000 fb38 	bl	80021a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8001b32:	2201      	movs	r2, #1
 8001b34:	2120      	movs	r1, #32
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <disable2+0x28>)
 8001b38:	f000 fb33 	bl	80021a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN2_Pin, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2110      	movs	r1, #16
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <disable2+0x28>)
 8001b42:	f000 fb2e 	bl	80021a2 <HAL_GPIO_WritePin>
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40010800 	.word	0x40010800

08001b50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b52:	490d      	ldr	r1, [pc, #52]	; (8001b88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b68:	4c0a      	ldr	r4, [pc, #40]	; (8001b94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b76:	f7ff fef9 	bl	800196c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f001 fb0f 	bl	800319c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b7e:	f7ff f9e9 	bl	8000f54 <main>
  bx lr
 8001b82:	4770      	bx	lr
  ldr r0, =_sdata
 8001b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b88:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001b8c:	08003234 	.word	0x08003234
  ldr r2, =_sbss
 8001b90:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001b94:	200000f0 	.word	0x200000f0

08001b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC1_2_IRQHandler>
	...

08001b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_Init+0x28>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_Init+0x28>)
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 f923 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	200f      	movs	r0, #15
 8001bb4:	f000 f808 	bl	8001bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff fe60 	bl	800187c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40022000 	.word	0x40022000

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x54>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_InitTick+0x58>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f93b 	bl	8001e62 <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00e      	b.n	8001c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d80a      	bhi.n	8001c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f000 f903 	bl	8001e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <HAL_InitTick+0x5c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000034 	.word	0x20000034
 8001c20:	2000003c 	.word	0x2000003c
 8001c24:	20000038 	.word	0x20000038

08001c28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_IncTick+0x1c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_IncTick+0x20>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a03      	ldr	r2, [pc, #12]	; (8001c48 <HAL_IncTick+0x20>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	2000003c 	.word	0x2000003c
 8001c48:	200000ec 	.word	0x200000ec

08001c4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b02      	ldr	r3, [pc, #8]	; (8001c5c <HAL_GetTick+0x10>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	200000ec 	.word	0x200000ec

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4906      	ldr	r1, [pc, #24]	; (8001cf8 <__NVIC_EnableIRQ+0x34>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	; (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	; (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc4:	d301      	bcc.n	8001dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00f      	b.n	8001dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <SysTick_Config+0x40>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f7ff ff90 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <SysTick_Config+0x40>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SysTick_Config+0x40>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000e010 	.word	0xe000e010

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff2d 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff42 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ff90 	bl	8001d50 <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff5f 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff35 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffa2 	bl	8001db4 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b08b      	sub	sp, #44	; 0x2c
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8e:	e161      	b.n	8002154 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e90:	2201      	movs	r2, #1
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8150 	bne.w	800214e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4a97      	ldr	r2, [pc, #604]	; (8002110 <HAL_GPIO_Init+0x294>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d05e      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001eb8:	4a95      	ldr	r2, [pc, #596]	; (8002110 <HAL_GPIO_Init+0x294>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d875      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ebe:	4a95      	ldr	r2, [pc, #596]	; (8002114 <HAL_GPIO_Init+0x298>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d058      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ec4:	4a93      	ldr	r2, [pc, #588]	; (8002114 <HAL_GPIO_Init+0x298>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d86f      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eca:	4a93      	ldr	r2, [pc, #588]	; (8002118 <HAL_GPIO_Init+0x29c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d052      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ed0:	4a91      	ldr	r2, [pc, #580]	; (8002118 <HAL_GPIO_Init+0x29c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d869      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ed6:	4a91      	ldr	r2, [pc, #580]	; (800211c <HAL_GPIO_Init+0x2a0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d04c      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001edc:	4a8f      	ldr	r2, [pc, #572]	; (800211c <HAL_GPIO_Init+0x2a0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d863      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ee2:	4a8f      	ldr	r2, [pc, #572]	; (8002120 <HAL_GPIO_Init+0x2a4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d046      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ee8:	4a8d      	ldr	r2, [pc, #564]	; (8002120 <HAL_GPIO_Init+0x2a4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d85d      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eee:	2b12      	cmp	r3, #18
 8001ef0:	d82a      	bhi.n	8001f48 <HAL_GPIO_Init+0xcc>
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d859      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ef6:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <HAL_GPIO_Init+0x80>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f77 	.word	0x08001f77
 8001f00:	08001f51 	.word	0x08001f51
 8001f04:	08001f63 	.word	0x08001f63
 8001f08:	08001fa5 	.word	0x08001fa5
 8001f0c:	08001fab 	.word	0x08001fab
 8001f10:	08001fab 	.word	0x08001fab
 8001f14:	08001fab 	.word	0x08001fab
 8001f18:	08001fab 	.word	0x08001fab
 8001f1c:	08001fab 	.word	0x08001fab
 8001f20:	08001fab 	.word	0x08001fab
 8001f24:	08001fab 	.word	0x08001fab
 8001f28:	08001fab 	.word	0x08001fab
 8001f2c:	08001fab 	.word	0x08001fab
 8001f30:	08001fab 	.word	0x08001fab
 8001f34:	08001fab 	.word	0x08001fab
 8001f38:	08001fab 	.word	0x08001fab
 8001f3c:	08001fab 	.word	0x08001fab
 8001f40:	08001f59 	.word	0x08001f59
 8001f44:	08001f6d 	.word	0x08001f6d
 8001f48:	4a76      	ldr	r2, [pc, #472]	; (8002124 <HAL_GPIO_Init+0x2a8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f4e:	e02c      	b.n	8001faa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	623b      	str	r3, [r7, #32]
          break;
 8001f56:	e029      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	623b      	str	r3, [r7, #32]
          break;
 8001f60:	e024      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	3308      	adds	r3, #8
 8001f68:	623b      	str	r3, [r7, #32]
          break;
 8001f6a:	e01f      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	330c      	adds	r3, #12
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e01a      	b.n	8001fac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	623b      	str	r3, [r7, #32]
          break;
 8001f82:	e013      	b.n	8001fac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	611a      	str	r2, [r3, #16]
          break;
 8001f96:	e009      	b.n	8001fac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	615a      	str	r2, [r3, #20]
          break;
 8001fa2:	e003      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
          break;
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x130>
          break;
 8001faa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2bff      	cmp	r3, #255	; 0xff
 8001fb0:	d801      	bhi.n	8001fb6 <HAL_GPIO_Init+0x13a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	e001      	b.n	8001fba <HAL_GPIO_Init+0x13e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2bff      	cmp	r3, #255	; 0xff
 8001fc0:	d802      	bhi.n	8001fc8 <HAL_GPIO_Init+0x14c>
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0x152>
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	3b08      	subs	r3, #8
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	401a      	ands	r2, r3
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80a9 	beq.w	800214e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ffc:	4b4a      	ldr	r3, [pc, #296]	; (8002128 <HAL_GPIO_Init+0x2ac>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a49      	ldr	r2, [pc, #292]	; (8002128 <HAL_GPIO_Init+0x2ac>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b47      	ldr	r3, [pc, #284]	; (8002128 <HAL_GPIO_Init+0x2ac>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002014:	4a45      	ldr	r2, [pc, #276]	; (800212c <HAL_GPIO_Init+0x2b0>)
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3d      	ldr	r2, [pc, #244]	; (8002130 <HAL_GPIO_Init+0x2b4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00d      	beq.n	800205c <HAL_GPIO_Init+0x1e0>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3c      	ldr	r2, [pc, #240]	; (8002134 <HAL_GPIO_Init+0x2b8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <HAL_GPIO_Init+0x1dc>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3b      	ldr	r2, [pc, #236]	; (8002138 <HAL_GPIO_Init+0x2bc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d101      	bne.n	8002054 <HAL_GPIO_Init+0x1d8>
 8002050:	2302      	movs	r3, #2
 8002052:	e004      	b.n	800205e <HAL_GPIO_Init+0x1e2>
 8002054:	2303      	movs	r3, #3
 8002056:	e002      	b.n	800205e <HAL_GPIO_Init+0x1e2>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_GPIO_Init+0x1e2>
 800205c:	2300      	movs	r3, #0
 800205e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002060:	f002 0203 	and.w	r2, r2, #3
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	4093      	lsls	r3, r2
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800206e:	492f      	ldr	r1, [pc, #188]	; (800212c <HAL_GPIO_Init+0x2b0>)
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002088:	4b2c      	ldr	r3, [pc, #176]	; (800213c <HAL_GPIO_Init+0x2c0>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	492b      	ldr	r1, [pc, #172]	; (800213c <HAL_GPIO_Init+0x2c0>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002096:	4b29      	ldr	r3, [pc, #164]	; (800213c <HAL_GPIO_Init+0x2c0>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	43db      	mvns	r3, r3
 800209e:	4927      	ldr	r1, [pc, #156]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4921      	ldr	r1, [pc, #132]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020be:	4b1f      	ldr	r3, [pc, #124]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	491d      	ldr	r1, [pc, #116]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	4917      	ldr	r1, [pc, #92]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	608b      	str	r3, [r1, #8]
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	4913      	ldr	r1, [pc, #76]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01f      	beq.n	8002140 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_GPIO_Init+0x2c0>)
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	490d      	ldr	r1, [pc, #52]	; (800213c <HAL_GPIO_Init+0x2c0>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	60cb      	str	r3, [r1, #12]
 800210c:	e01f      	b.n	800214e <HAL_GPIO_Init+0x2d2>
 800210e:	bf00      	nop
 8002110:	10320000 	.word	0x10320000
 8002114:	10310000 	.word	0x10310000
 8002118:	10220000 	.word	0x10220000
 800211c:	10210000 	.word	0x10210000
 8002120:	10120000 	.word	0x10120000
 8002124:	10110000 	.word	0x10110000
 8002128:	40021000 	.word	0x40021000
 800212c:	40010000 	.word	0x40010000
 8002130:	40010800 	.word	0x40010800
 8002134:	40010c00 	.word	0x40010c00
 8002138:	40011000 	.word	0x40011000
 800213c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_GPIO_Init+0x2f4>)
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	43db      	mvns	r3, r3
 8002148:	4909      	ldr	r1, [pc, #36]	; (8002170 <HAL_GPIO_Init+0x2f4>)
 800214a:	4013      	ands	r3, r2
 800214c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	3301      	adds	r3, #1
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	f47f ae96 	bne.w	8001e90 <HAL_GPIO_Init+0x14>
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	372c      	adds	r7, #44	; 0x2c
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	887b      	ldrh	r3, [r7, #2]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	e001      	b.n	8002196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	807b      	strh	r3, [r7, #2]
 80021ae:	4613      	mov	r3, r2
 80021b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b2:	787b      	ldrb	r3, [r7, #1]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b8:	887a      	ldrh	r2, [r7, #2]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021be:	e003      	b.n	80021c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	041a      	lsls	r2, r3, #16
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	611a      	str	r2, [r3, #16]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e4:	887a      	ldrh	r2, [r7, #2]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4013      	ands	r3, r2
 80021ea:	041a      	lsls	r2, r3, #16
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	43d9      	mvns	r1, r3
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	400b      	ands	r3, r1
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e272      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8087 	beq.w	8002332 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002224:	4b92      	ldr	r3, [pc, #584]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b04      	cmp	r3, #4
 800222e:	d00c      	beq.n	800224a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002230:	4b8f      	ldr	r3, [pc, #572]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b08      	cmp	r3, #8
 800223a:	d112      	bne.n	8002262 <HAL_RCC_OscConfig+0x5e>
 800223c:	4b8c      	ldr	r3, [pc, #560]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002248:	d10b      	bne.n	8002262 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224a:	4b89      	ldr	r3, [pc, #548]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d06c      	beq.n	8002330 <HAL_RCC_OscConfig+0x12c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d168      	bne.n	8002330 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e24c      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x76>
 800226c:	4b80      	ldr	r3, [pc, #512]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a7f      	ldr	r2, [pc, #508]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	e02e      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x98>
 8002282:	4b7b      	ldr	r3, [pc, #492]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a7a      	ldr	r2, [pc, #488]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b78      	ldr	r3, [pc, #480]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a77      	ldr	r2, [pc, #476]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e01d      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0xbc>
 80022a6:	4b72      	ldr	r3, [pc, #456]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a71      	ldr	r2, [pc, #452]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b6f      	ldr	r3, [pc, #444]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a6e      	ldr	r2, [pc, #440]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e00b      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 80022c0:	4b6b      	ldr	r3, [pc, #428]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a6a      	ldr	r2, [pc, #424]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b68      	ldr	r3, [pc, #416]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a67      	ldr	r2, [pc, #412]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff fcb4 	bl	8001c4c <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7ff fcb0 	bl	8001c4c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e200      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	4b5d      	ldr	r3, [pc, #372]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0xe4>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff fca0 	bl	8001c4c <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7ff fc9c 	bl	8001c4c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e1ec      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002322:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x10c>
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d063      	beq.n	8002406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800233e:	4b4c      	ldr	r3, [pc, #304]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800234a:	4b49      	ldr	r3, [pc, #292]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b08      	cmp	r3, #8
 8002354:	d11c      	bne.n	8002390 <HAL_RCC_OscConfig+0x18c>
 8002356:	4b46      	ldr	r3, [pc, #280]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d116      	bne.n	8002390 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	4b43      	ldr	r3, [pc, #268]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_RCC_OscConfig+0x176>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e1c0      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237a:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4939      	ldr	r1, [pc, #228]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	e03a      	b.n	8002406 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002398:	4b36      	ldr	r3, [pc, #216]	; (8002474 <HAL_RCC_OscConfig+0x270>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7ff fc55 	bl	8001c4c <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a6:	f7ff fc51 	bl	8001c4c <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e1a1      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4927      	ldr	r1, [pc, #156]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
 80023d8:	e015      	b.n	8002406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <HAL_RCC_OscConfig+0x270>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fc34 	bl	8001c4c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e8:	f7ff fc30 	bl	8001c4c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e180      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d03a      	beq.n	8002488 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d019      	beq.n	800244e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002420:	f7ff fc14 	bl	8001c4c <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002428:	f7ff fc10 	bl	8001c4c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e160      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002446:	2001      	movs	r0, #1
 8002448:	f000 faa6 	bl	8002998 <RCC_Delay>
 800244c:	e01c      	b.n	8002488 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002454:	f7ff fbfa 	bl	8001c4c <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245a:	e00f      	b.n	800247c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245c:	f7ff fbf6 	bl	8001c4c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d908      	bls.n	800247c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e146      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	42420000 	.word	0x42420000
 8002478:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247c:	4b92      	ldr	r3, [pc, #584]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e9      	bne.n	800245c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a6 	beq.w	80025e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249a:	4b8b      	ldr	r3, [pc, #556]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10d      	bne.n	80024c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	4b88      	ldr	r3, [pc, #544]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4a87      	ldr	r2, [pc, #540]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b0:	61d3      	str	r3, [r2, #28]
 80024b2:	4b85      	ldr	r3, [pc, #532]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024be:	2301      	movs	r3, #1
 80024c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c2:	4b82      	ldr	r3, [pc, #520]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d118      	bne.n	8002500 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ce:	4b7f      	ldr	r3, [pc, #508]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a7e      	ldr	r2, [pc, #504]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024da:	f7ff fbb7 	bl	8001c4c <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e2:	f7ff fbb3 	bl	8001c4c <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b64      	cmp	r3, #100	; 0x64
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e103      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f4:	4b75      	ldr	r3, [pc, #468]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x312>
 8002508:	4b6f      	ldr	r3, [pc, #444]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4a6e      	ldr	r2, [pc, #440]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6213      	str	r3, [r2, #32]
 8002514:	e02d      	b.n	8002572 <HAL_RCC_OscConfig+0x36e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x334>
 800251e:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a69      	ldr	r2, [pc, #420]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6213      	str	r3, [r2, #32]
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4a66      	ldr	r2, [pc, #408]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	6213      	str	r3, [r2, #32]
 8002536:	e01c      	b.n	8002572 <HAL_RCC_OscConfig+0x36e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d10c      	bne.n	800255a <HAL_RCC_OscConfig+0x356>
 8002540:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a60      	ldr	r2, [pc, #384]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	4b5e      	ldr	r3, [pc, #376]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a5d      	ldr	r2, [pc, #372]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6213      	str	r3, [r2, #32]
 8002558:	e00b      	b.n	8002572 <HAL_RCC_OscConfig+0x36e>
 800255a:	4b5b      	ldr	r3, [pc, #364]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a5a      	ldr	r2, [pc, #360]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	6213      	str	r3, [r2, #32]
 8002566:	4b58      	ldr	r3, [pc, #352]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a57      	ldr	r2, [pc, #348]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	f023 0304 	bic.w	r3, r3, #4
 8002570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d015      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257a:	f7ff fb67 	bl	8001c4c <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7ff fb63 	bl	8001c4c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0b1      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	4b4b      	ldr	r3, [pc, #300]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ee      	beq.n	8002582 <HAL_RCC_OscConfig+0x37e>
 80025a4:	e014      	b.n	80025d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a6:	f7ff fb51 	bl	8001c4c <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7ff fb4d 	bl	8001c4c <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e09b      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	4b40      	ldr	r3, [pc, #256]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ee      	bne.n	80025ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	4b3c      	ldr	r3, [pc, #240]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4a3b      	ldr	r2, [pc, #236]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8087 	beq.w	80026fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ec:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d061      	beq.n	80026bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d146      	bne.n	800268e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002600:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7ff fb21 	bl	8001c4c <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7ff fb1d 	bl	8001c4c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e06d      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002620:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002634:	d108      	bne.n	8002648 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4921      	ldr	r1, [pc, #132]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002648:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a19      	ldr	r1, [r3, #32]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	430b      	orrs	r3, r1
 800265a:	491b      	ldr	r1, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x4cc>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7ff faf1 	bl	8001c4c <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7ff faed 	bl	8001c4c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e03d      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x46a>
 800268c:	e035      	b.n	80026fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_RCC_OscConfig+0x4cc>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff fada 	bl	8001c4c <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269c:	f7ff fad6 	bl	8001c4c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e026      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x498>
 80026ba:	e01e      	b.n	80026fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e019      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40007000 	.word	0x40007000
 80026d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_OscConfig+0x500>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0d0      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800271c:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d910      	bls.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b67      	ldr	r3, [pc, #412]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0207 	bic.w	r2, r3, #7
 8002732:	4965      	ldr	r1, [pc, #404]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b8      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800276e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002786:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b50      	ldr	r3, [pc, #320]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	494d      	ldr	r1, [pc, #308]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d040      	beq.n	8002828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d115      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07f      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e073      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d6:	4b3d      	ldr	r3, [pc, #244]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e06b      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e6:	4b39      	ldr	r3, [pc, #228]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f023 0203 	bic.w	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4936      	ldr	r1, [pc, #216]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f8:	f7ff fa28 	bl	8001c4c <HAL_GetTick>
 80027fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002800:	f7ff fa24 	bl	8001c4c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e053      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 020c 	and.w	r2, r3, #12
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	429a      	cmp	r2, r3
 8002826:	d1eb      	bne.n	8002800 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d210      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 0207 	bic.w	r2, r3, #7
 800283e:	4922      	ldr	r1, [pc, #136]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e032      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4916      	ldr	r1, [pc, #88]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	490e      	ldr	r1, [pc, #56]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002896:	f000 f821 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800289a:	4602      	mov	r2, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	490a      	ldr	r1, [pc, #40]	; (80028d0 <HAL_RCC_ClockConfig+0x1c8>)
 80028a8:	5ccb      	ldrb	r3, [r1, r3]
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1cc>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1d0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff f986 	bl	8001bc8 <HAL_InitTick>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40022000 	.word	0x40022000
 80028cc:	40021000 	.word	0x40021000
 80028d0:	0800321c 	.word	0x0800321c
 80028d4:	20000034 	.word	0x20000034
 80028d8:	20000038 	.word	0x20000038

080028dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	b490      	push	{r4, r7}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028e2:	4b29      	ldr	r3, [pc, #164]	; (8002988 <HAL_RCC_GetSysClockFreq+0xac>)
 80028e4:	1d3c      	adds	r4, r7, #4
 80028e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028ec:	f240 2301 	movw	r3, #513	; 0x201
 80028f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002906:	4b21      	ldr	r3, [pc, #132]	; (800298c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b04      	cmp	r3, #4
 8002914:	d002      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x40>
 8002916:	2b08      	cmp	r3, #8
 8002918:	d003      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x46>
 800291a:	e02b      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800291c:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_RCC_GetSysClockFreq+0xb4>)
 800291e:	623b      	str	r3, [r7, #32]
      break;
 8002920:	e02b      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	0c9b      	lsrs	r3, r3, #18
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	3328      	adds	r3, #40	; 0x28
 800292c:	443b      	add	r3, r7
 800292e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002932:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d012      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800293e:	4b13      	ldr	r3, [pc, #76]	; (800298c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	0c5b      	lsrs	r3, r3, #17
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	3328      	adds	r3, #40	; 0x28
 800294a:	443b      	add	r3, r7
 800294c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002950:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002956:	fb03 f202 	mul.w	r2, r3, r2
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
 8002962:	e004      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	623b      	str	r3, [r7, #32]
      break;
 8002972:	e002      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002976:	623b      	str	r3, [r7, #32]
      break;
 8002978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297a:	6a3b      	ldr	r3, [r7, #32]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3728      	adds	r7, #40	; 0x28
 8002980:	46bd      	mov	sp, r7
 8002982:	bc90      	pop	{r4, r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	0800320c 	.word	0x0800320c
 800298c:	40021000 	.word	0x40021000
 8002990:	007a1200 	.word	0x007a1200
 8002994:	003d0900 	.word	0x003d0900

08002998 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <RCC_Delay+0x34>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <RCC_Delay+0x38>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0a5b      	lsrs	r3, r3, #9
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029b4:	bf00      	nop
  }
  while (Delay --);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1e5a      	subs	r2, r3, #1
 80029ba:	60fa      	str	r2, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f9      	bne.n	80029b4 <RCC_Delay+0x1c>
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20000034 	.word	0x20000034
 80029d0:	10624dd3 	.word	0x10624dd3

080029d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e041      	b.n	8002a6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe ff60 	bl	80018c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f000 fa6a 	bl	8002eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d001      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e035      	b.n	8002af8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <HAL_TIM_Base_Start_IT+0x90>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_TIM_Base_Start_IT+0x4e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab6:	d004      	beq.n	8002ac2 <HAL_TIM_Base_Start_IT+0x4e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <HAL_TIM_Base_Start_IT+0x94>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d111      	bne.n	8002ae6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	d010      	beq.n	8002af6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae4:	e007      	b.n	8002af6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	40000400 	.word	0x40000400

08002b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d122      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d11b      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0202 	mvn.w	r2, #2
 8002b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f9b1 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f9a4 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f9b3 	bl	8002ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0204 	mvn.w	r2, #4
 8002b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2202      	movs	r2, #2
 8002b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f987 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f97a 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f989 	bl	8002ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d122      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d11b      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0208 	mvn.w	r2, #8
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2204      	movs	r2, #4
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f95d 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f950 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f95f 	bl	8002ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d122      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d11b      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0210 	mvn.w	r2, #16
 8002c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2208      	movs	r2, #8
 8002c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f933 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002c50:	e005      	b.n	8002c5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f926 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f935 	bl	8002ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d10e      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0201 	mvn.w	r2, #1
 8002c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fe fabc 	bl	8001208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b80      	cmp	r3, #128	; 0x80
 8002c9c:	d10e      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca8:	2b80      	cmp	r3, #128	; 0x80
 8002caa:	d107      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fa67 	bl	800318a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	2b40      	cmp	r3, #64	; 0x40
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b40      	cmp	r3, #64	; 0x40
 8002cd6:	d107      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f8f9 	bl	8002eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d10e      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d107      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0220 	mvn.w	r2, #32
 8002d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fa32 	bl	8003178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_TIM_ConfigClockSource+0x18>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e0b3      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x180>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d6c:	d03e      	beq.n	8002dec <HAL_TIM_ConfigClockSource+0xd0>
 8002d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d72:	f200 8087 	bhi.w	8002e84 <HAL_TIM_ConfigClockSource+0x168>
 8002d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7a:	f000 8085 	beq.w	8002e88 <HAL_TIM_ConfigClockSource+0x16c>
 8002d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d82:	d87f      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x168>
 8002d84:	2b70      	cmp	r3, #112	; 0x70
 8002d86:	d01a      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0xa2>
 8002d88:	2b70      	cmp	r3, #112	; 0x70
 8002d8a:	d87b      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x168>
 8002d8c:	2b60      	cmp	r3, #96	; 0x60
 8002d8e:	d050      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x116>
 8002d90:	2b60      	cmp	r3, #96	; 0x60
 8002d92:	d877      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x168>
 8002d94:	2b50      	cmp	r3, #80	; 0x50
 8002d96:	d03c      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0xf6>
 8002d98:	2b50      	cmp	r3, #80	; 0x50
 8002d9a:	d873      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x168>
 8002d9c:	2b40      	cmp	r3, #64	; 0x40
 8002d9e:	d058      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x136>
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d86f      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x168>
 8002da4:	2b30      	cmp	r3, #48	; 0x30
 8002da6:	d064      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0x156>
 8002da8:	2b30      	cmp	r3, #48	; 0x30
 8002daa:	d86b      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x168>
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d060      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0x156>
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d867      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x168>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d05c      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0x156>
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d05a      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002dbc:	e062      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6899      	ldr	r1, [r3, #8]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f000 f95c 	bl	800308a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002de0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	609a      	str	r2, [r3, #8]
      break;
 8002dea:	e04e      	b.n	8002e8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	6899      	ldr	r1, [r3, #8]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f000 f945 	bl	800308a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e0e:	609a      	str	r2, [r3, #8]
      break;
 8002e10:	e03b      	b.n	8002e8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f000 f8bc 	bl	8002f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2150      	movs	r1, #80	; 0x50
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f913 	bl	8003056 <TIM_ITRx_SetConfig>
      break;
 8002e30:	e02b      	b.n	8002e8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f000 f8da 	bl	8002ff8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2160      	movs	r1, #96	; 0x60
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f903 	bl	8003056 <TIM_ITRx_SetConfig>
      break;
 8002e50:	e01b      	b.n	8002e8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6859      	ldr	r1, [r3, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f000 f89c 	bl	8002f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2140      	movs	r1, #64	; 0x40
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 f8f3 	bl	8003056 <TIM_ITRx_SetConfig>
      break;
 8002e70:	e00b      	b.n	8002e8a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	f000 f8ea 	bl	8003056 <TIM_ITRx_SetConfig>
        break;
 8002e82:	e002      	b.n	8002e8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e84:	bf00      	nop
 8002e86:	e000      	b.n	8002e8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a25      	ldr	r2, [pc, #148]	; (8002f94 <TIM_Base_SetConfig+0xa8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d007      	beq.n	8002f14 <TIM_Base_SetConfig+0x28>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0a:	d003      	beq.n	8002f14 <TIM_Base_SetConfig+0x28>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <TIM_Base_SetConfig+0xac>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d108      	bne.n	8002f26 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <TIM_Base_SetConfig+0xa8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <TIM_Base_SetConfig+0x52>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d003      	beq.n	8002f3e <TIM_Base_SetConfig+0x52>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <TIM_Base_SetConfig+0xac>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d108      	bne.n	8002f50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <TIM_Base_SetConfig+0xa8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d103      	bne.n	8002f84 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	615a      	str	r2, [r3, #20]
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	40012c00 	.word	0x40012c00
 8002f98:	40000400 	.word	0x40000400

08002f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f023 0201 	bic.w	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f023 030a 	bic.w	r3, r3, #10
 8002fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	621a      	str	r2, [r3, #32]
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f023 0210 	bic.w	r2, r3, #16
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003022:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	031b      	lsls	r3, r3, #12
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003034:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	621a      	str	r2, [r3, #32]
}
 800304c:	bf00      	nop
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003056:	b480      	push	{r7}
 8003058:	b085      	sub	sp, #20
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	f043 0307 	orr.w	r3, r3, #7
 8003078:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	609a      	str	r2, [r3, #8]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr

0800308a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800308a:	b480      	push	{r7}
 800308c:	b087      	sub	sp, #28
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	021a      	lsls	r2, r3, #8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	609a      	str	r2, [r3, #8]
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030dc:	2302      	movs	r3, #2
 80030de:	e041      	b.n	8003164 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a14      	ldr	r2, [pc, #80]	; (8003170 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d009      	beq.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312c:	d004      	beq.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a10      	ldr	r2, [pc, #64]	; (8003174 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d10c      	bne.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800313e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	4313      	orrs	r3, r2
 8003148:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40012c00 	.word	0x40012c00
 8003174:	40000400 	.word	0x40000400

08003178 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <__libc_init_array>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	2600      	movs	r6, #0
 80031a0:	4d0c      	ldr	r5, [pc, #48]	; (80031d4 <__libc_init_array+0x38>)
 80031a2:	4c0d      	ldr	r4, [pc, #52]	; (80031d8 <__libc_init_array+0x3c>)
 80031a4:	1b64      	subs	r4, r4, r5
 80031a6:	10a4      	asrs	r4, r4, #2
 80031a8:	42a6      	cmp	r6, r4
 80031aa:	d109      	bne.n	80031c0 <__libc_init_array+0x24>
 80031ac:	f000 f822 	bl	80031f4 <_init>
 80031b0:	2600      	movs	r6, #0
 80031b2:	4d0a      	ldr	r5, [pc, #40]	; (80031dc <__libc_init_array+0x40>)
 80031b4:	4c0a      	ldr	r4, [pc, #40]	; (80031e0 <__libc_init_array+0x44>)
 80031b6:	1b64      	subs	r4, r4, r5
 80031b8:	10a4      	asrs	r4, r4, #2
 80031ba:	42a6      	cmp	r6, r4
 80031bc:	d105      	bne.n	80031ca <__libc_init_array+0x2e>
 80031be:	bd70      	pop	{r4, r5, r6, pc}
 80031c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c4:	4798      	blx	r3
 80031c6:	3601      	adds	r6, #1
 80031c8:	e7ee      	b.n	80031a8 <__libc_init_array+0xc>
 80031ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ce:	4798      	blx	r3
 80031d0:	3601      	adds	r6, #1
 80031d2:	e7f2      	b.n	80031ba <__libc_init_array+0x1e>
 80031d4:	0800322c 	.word	0x0800322c
 80031d8:	0800322c 	.word	0x0800322c
 80031dc:	0800322c 	.word	0x0800322c
 80031e0:	08003230 	.word	0x08003230

080031e4 <memset>:
 80031e4:	4603      	mov	r3, r0
 80031e6:	4402      	add	r2, r0
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d100      	bne.n	80031ee <memset+0xa>
 80031ec:	4770      	bx	lr
 80031ee:	f803 1b01 	strb.w	r1, [r3], #1
 80031f2:	e7f9      	b.n	80031e8 <memset+0x4>

080031f4 <_init>:
 80031f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f6:	bf00      	nop
 80031f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fa:	bc08      	pop	{r3}
 80031fc:	469e      	mov	lr, r3
 80031fe:	4770      	bx	lr

08003200 <_fini>:
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003202:	bf00      	nop
 8003204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003206:	bc08      	pop	{r3}
 8003208:	469e      	mov	lr, r3
 800320a:	4770      	bx	lr
